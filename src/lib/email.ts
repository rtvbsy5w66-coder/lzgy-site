import { Resend } from "resend";
import * as nodemailer from "nodemailer";

// Initialize Resend if API key is available
let resend: Resend | null = null;
if (process.env.RESEND_API_KEY) {
  resend = new Resend(process.env.RESEND_API_KEY);
  console.log('‚úÖ Resend initialized with API key');
} else {
  console.log('‚ö†Ô∏è RESEND_API_KEY not found in environment variables');
}

interface ContactData {
  name: string;
  email: string;
  subject: string;
  message: string;
  phone?: string;
  district?: string;
  preferredContact?: string;
  newsletter?: boolean;
}

export async function sendContactNotification(data: ContactData) {
  try {
    console.log("Email k√ºld√©s kezd√©se...", {
      to: "lovas.zoltan1986@gmail.com",
      environment: process.env.NODE_ENV,
      resendAvailable: !!resend,
    });

    const { name, email, subject, message, phone, district, preferredContact } = data;

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #1a365d;">√öj kapcsolatfelv√©teli √ºzenet √©rkezett</h2>
        
        <div style="background-color: #f7fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <p><strong>Felad√≥ neve:</strong> ${name}</p>
          <p><strong>Email c√≠me:</strong> ${email}</p>
          ${phone ? `<p><strong>Telefonsz√°m:</strong> ${phone}</p>` : ""}
          ${district ? `<p><strong>Ker√ºlet:</strong> ${district}</p>` : ""}
          ${
            preferredContact
              ? `<p><strong>Prefer√°lt kapcsolattart√°s:</strong> ${preferredContact}</p>`
              : ""
          }
          <p><strong>T√°rgy:</strong> ${subject}</p>
          <p style="margin-top: 20px;"><strong>√úzenet:</strong></p>
          <p style="white-space: pre-wrap;">${message}</p>
        </div>
        
        <p style="color: #718096; font-size: 14px;">
          Ez egy automatikus √©rtes√≠t√©s a weboldal kapcsolatfelv√©teli ≈±rlapj√°r√≥l.
        </p>
      </div>
    `;

    // Email content for all services
    const emailContent = {
      from: "Lovas Zolt√°n <noreply@lovaszoltan.dev>",
      to: "lovas.zoltan1986@gmail.com",
      subject: `√öj √ºzenet: ${subject}`,
      html: emailHtml,
      replyTo: email,
    };

    // Priority 1: Try Gmail SMTP first
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        const info = await gmailTransporter.sendMail({
          ...emailContent,
          from: `"Lovas Zolt√°n" <${process.env.GMAIL_USER}>`,
        });
        
        console.log("‚úÖ Gmail SMTP - Email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);

        console.log("‚úÖ Resend - Email sikeresen elk√ºldve!");
        console.log("Resend email eredm√©nye:", emailResult);
        
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
        // Continue to fallback
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Email Preview URL: ${previewUrl}`);
          console.log(`üì¨ Email ID: ${info.messageId}`);
          
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    // Final fallback: Log email details
    console.log("‚ùå Egyetlen email szolg√°ltat√°s sem el√©rhet≈ë!");
    console.log(`üìß EMAIL PREVIEW (csak konzol):`);
    console.log(`To: ${emailContent.to}`);
    console.log(`Subject: ${emailContent.subject}`);
    console.log(`From: ${emailContent.from}`);
    console.log(`Reply-To: ${emailContent.replyTo}`);
    console.log(`---`);
    console.log(`üîß Konfigur√°lja a Gmail SMTP-t vagy Resend API-t val√≥s email k√ºld√©shez!`);
    
    return { success: true };

  } catch (error) {
    console.error("Email k√ºld√©si hiba r√©szletek:", {
      error: error instanceof Error ? error.message : String(error),
      code: error instanceof Error && 'code' in error ? error.code : undefined,
      statusCode: error instanceof Error && 'statusCode' in error ? error.statusCode : undefined,
    });
    throw error;
  }
}

// Create Ethereal Email transporter for development (fallback)
async function createEtherealTransporter() {
  try {
    const testAccount = await nodemailer.createTestAccount();
    
    return nodemailer.createTransport({
      host: 'smtp.ethereal.email',
      port: 587,
      secure: false,
      auth: {
        user: testAccount.user,
        pass: testAccount.pass,
      },
    });
  } catch (error) {
    console.error('Failed to create Ethereal transporter:', error);
    return null;
  }
}

// Create Gmail SMTP transporter for real email sending
function createGmailTransporter() {
  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {
    console.log('Gmail credentials not configured');
    return null;
  }

  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_APP_PASSWORD,
    },
  });
}

// GDPR compliant newsletter subscription confirmation email
export async function sendNewsletterConfirmation(subscriberData: {
  name: string;
  email: string;
  categories?: string[]; // Array of category enums
}) {
  try {
    console.log("H√≠rlev√©l meger≈ës√≠t≈ë email k√ºld√©se...", {
      to: subscriberData.email,
      environment: process.env.NODE_ENV,
      resendAvailable: !!resend,
      categories: subscriberData.categories,
    });

    const { name, email, categories } = subscriberData;
    const unsubscribeUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/newsletter/unsubscribe?email=${encodeURIComponent(email)}`;

    // Map category enums to human-readable names
    const categoryNames: Record<string, string> = {
      'NEWS': 'H√≠rek √©s Aktualit√°sok',
      'EVENTS': 'Esem√©nyek √©s Programok',
      'POLICY': 'Politikai Fejlem√©nyek',
      'COMMUNITY': 'K√∂z√∂ss√©gi H√≠rek',
      'NEWSLETTER': '√Åltal√°nos H√≠rlev√©l',
    };

    const subscribedCategories = categories && categories.length > 0
      ? categories.map(cat => categoryNames[cat] || cat).join(', ')
      : 'Minden kateg√≥ria';

    const emailHtml = `
      <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;">
          <h1 style="color: white; margin: 0; font-size: 28px; font-weight: 300;">üìß H√≠rlev√©l Feliratkoz√°s</h1>
          <p style="color: #f0f4f8; margin: 10px 0 0 0; font-size: 16px;">Meger≈ës√≠tj√ºk a feliratkoz√°s√°t</p>
        </div>

        <div style="padding: 40px 20px;">
          <h2 style="color: #2d3748; margin-bottom: 20px;">Kedves ${name}!</h2>

          <p style="color: #4a5568; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
            K√∂sz√∂nj√ºk, hogy feliratkozott h√≠rlevel√ºnkre! Ez az email meger≈ës√≠ti, hogy sikeresen feliratkoztattuk √ñnt a k√∂vetkez≈ë email c√≠mmel:
          </p>

          <div style="background-color: #f7fafc; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #667eea;">
            <p style="margin: 0; color: #2d3748; font-weight: 600;">üìß ${email}</p>
          </div>

          <div style="background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 50%); padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #38b2ac;">
            <h3 style="color: #234e52; margin: 0 0 15px 0; font-size: 18px;">‚úÖ Feliratkozott kateg√≥ri√°k:</h3>
            <p style="color: #2c7a7b; font-size: 16px; margin: 0; font-weight: 600;">
              ${subscribedCategories}
            </p>
          </div>

          <h3 style="color: #2d3748; margin-top: 30px; margin-bottom: 15px;">Mit fog kapni ezekben a kateg√≥ri√°kban?</h3>
          <ul style="color: #4a5568; font-size: 15px; line-height: 1.6; padding-left: 20px;">
            <li style="margin-bottom: 8px;">üóûÔ∏è √öj h√≠rek √©s cikkek √©rtes√≠t√©sei</li>
            <li style="margin-bottom: 8px;">üìÖ K√∂zelg≈ë esem√©nyek √©s programok</li>
            <li style="margin-bottom: 8px;">üèõÔ∏è Politikai fejlem√©nyek √©s √°ll√°spontok</li>
            <li style="margin-bottom: 8px;">ü§ù K√∂z√∂ss√©gi esem√©nyek megh√≠v√≥i</li>
          </ul>
          
          <div style="background-color: #edf2f7; padding: 20px; border-radius: 8px; margin: 30px 0;">
            <h4 style="color: #2d3748; margin: 0 0 10px 0; font-size: 16px;">üîí Adatv√©delem</h4>
            <p style="color: #4a5568; font-size: 14px; margin: 0; line-height: 1.5;">
              Az √ñn email c√≠m√©t bizalmasan kezelj√ºk √©s csak h√≠rlev√©l k√ºld√©sre haszn√°ljuk. 
              Adatait nem adjuk √°t harmadik f√©lnek. GDPR megfelel≈ëen b√°rmikor leiratkozhat.
            </p>
          </div>
          
          <div style="text-align: center; margin: 40px 0;">
            <p style="color: #718096; font-size: 14px; margin: 0;">
              Ha nem k√≠v√°n t√∂bb h√≠rlevelet kapni, 
              <a href="${unsubscribeUrl}" style="color: #667eea; text-decoration: none; font-weight: 600;">
                itt leiratkozhat
              </a>
            </p>
          </div>
        </div>
        
        <div style="background-color: #f7fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0;">
          <p style="color: #718096; font-size: 12px; margin: 0;">
            Ezt az emailt automatikusan k√ºldte a Lovas Zolt√°n politikai oldal rendszere.
          </p>
          <p style="color: #718096; font-size: 12px; margin: 5px 0 0 0;">
            <a href="${unsubscribeUrl}" style="color: #667eea; text-decoration: none;">Leiratkoz√°s</a>
          </p>
        </div>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: email,
      replyTo: "lovas.zoltan1986@gmail.com",
      subject: "‚úÖ H√≠rlev√©l feliratkoz√°s meger≈ës√≠t√©se - Lovas Zolt√°n",
      html: emailHtml,
      text: `
Kedves ${name}!

K√∂sz√∂nj√ºk, hogy feliratkozott h√≠rlevel√ºnkre!

Ez az email meger≈ës√≠ti, hogy sikeresen feliratkozott a k√∂vetkez≈ë email c√≠mmel: ${email}

‚úÖ Feliratkozott kateg√≥ri√°k: ${subscribedCategories}

Mit fog kapni ezekben a kateg√≥ri√°kban:
- √öj h√≠rek √©s cikkek √©rtes√≠t√©sei
- K√∂zelg≈ë esem√©nyek √©s programok
- Politikai fejlem√©nyek √©s √°ll√°spontok
- K√∂z√∂ss√©gi esem√©nyek megh√≠v√≥i

Adatv√©delem: Az √ñn email c√≠m√©t bizalmasan kezelj√ºk √©s csak h√≠rlev√©l k√ºld√©sre haszn√°ljuk.

Ha nem k√≠v√°n t√∂bb h√≠rlevelet kapni, leiratkozhat itt: ${unsubscribeUrl}

√údv√∂zlettel,
Lovas Zolt√°n csapata
      `,
    };

    // Priority 1: Try Gmail SMTP (production AND development)
    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'development' || process.env.FORCE_GMAIL === 'true') {
      const gmailTransporter = createGmailTransporter();
      if (gmailTransporter) {
        try {
          await gmailTransporter.sendMail(emailContent);
          console.log("‚úÖ Gmail SMTP - H√≠rlev√©l meger≈ës√≠t≈ë email sikeresen elk√ºldve!");
          return { success: true };
        } catch (error) {
          console.error('Gmail SMTP k√ºld√©si hiba:', error);
        }
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);
        console.log("‚úÖ Resend - H√≠rlev√©l meger≈ës√≠t≈ë email sikeresen elk√ºldve!");
        console.log("Resend email eredm√©nye:", emailResult);
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Newsletter Confirmation Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    // Final fallback: Log email details
    console.log("‚ùå H√≠rlev√©l meger≈ës√≠t≈ë email k√ºld√©se sikertelen!");
    console.log(`üìß NEWSLETTER CONFIRMATION EMAIL PREVIEW (csak konzol):`);
    console.log(`To: ${emailContent.to}`);
    console.log(`Subject: ${emailContent.subject}`);
    console.log(`From: ${emailContent.from}`);
    
    return { success: false, error: "Email service unavailable" };
  } catch (error) {
    console.error("H√≠rlev√©l meger≈ës√≠t≈ë email k√ºld√©si hiba:", error);
    return { success: false, error: "Failed to send confirmation email" };
  }
}

// GDPR compliant newsletter unsubscribe confirmation email to user
export async function sendUnsubscribeConfirmation(subscriberData: {
  name: string;
  email: string;
}) {
  try {
    console.log("Leiratkoz√°s meger≈ës√≠t≈ë email k√ºld√©se...", {
      to: subscriberData.email,
      environment: process.env.NODE_ENV,
      resendAvailable: !!resend,
    });

    const { name, email } = subscriberData;

    const emailHtml = `
      <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
        <div style="background: linear-gradient(135deg, #e53e3e 0%, #c53030 100%); padding: 40px 20px; text-align: center;">
          <h1 style="color: white; margin: 0; font-size: 28px; font-weight: 300;">üì≠ H√≠rlev√©l Leiratkoz√°s</h1>
          <p style="color: #fed7d7; margin: 10px 0 0 0; font-size: 16px;">Leiratkoz√°s meger≈ës√≠t√©se</p>
        </div>
        
        <div style="padding: 40px 20px;">
          <h2 style="color: #2d3748; margin-bottom: 20px;">Kedves ${name}!</h2>
          
          <p style="color: #4a5568; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
            Ez az email meger≈ës√≠ti, hogy sikeresen leiratkozott a h√≠rlevel√ºnkr≈ël. A k√∂vetkez≈ë email c√≠m ker√ºlt elt√°vol√≠t√°sra:
          </p>
          
          <div style="background-color: #fed7d7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #e53e3e;">
            <p style="margin: 0; color: #2d3748; font-weight: 600;">üìß ${email}</p>
          </div>
          
          <div style="background-color: #f0fff4; padding: 20px; border-radius: 8px; margin: 30px 0; border-left: 4px solid #38a169;">
            <h4 style="color: #2d3748; margin: 0 0 10px 0; font-size: 16px;">‚úÖ Leiratkoz√°s sikeres</h4>
            <p style="color: #4a5568; font-size: 14px; margin: 0; line-height: 1.5;">
              T√∂bb√© nem fog h√≠rlevelet kapni t≈ël√ºnk. Adatait biztons√°gosan t√°roljuk, de newsletter √ºzeneteket nem k√ºld√ºnk.
            </p>
          </div>
          
          <div style="background-color: #edf2f7; padding: 20px; border-radius: 8px; margin: 30px 0;">
            <h4 style="color: #2d3748; margin: 0 0 10px 0; font-size: 16px;">üí° Meggondolta mag√°t?</h4>
            <p style="color: #4a5568; font-size: 14px; margin: 0; line-height: 1.5;">
              Ha k√©s≈ëbb √∫jra szeretne feliratkozni, megteheti a <a href="${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/kapcsolat" style="color: #667eea; text-decoration: none; font-weight: 600;">kapcsolat oldalon</a> vagy a <a href="${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/profil" style="color: #667eea; text-decoration: none; font-weight: 600;">profil oldal√°n</a>.
            </p>
          </div>
        </div>
        
        <div style="background-color: #f7fafc; padding: 20px; text-align: center; border-top: 1px solid #e2e8f0;">
          <p style="color: #718096; font-size: 12px; margin: 0;">
            Ezt az emailt automatikusan k√ºldte a Lovas Zolt√°n politikai oldal rendszere.
          </p>
        </div>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: email,
      replyTo: "lovas.zoltan1986@gmail.com",
      subject: "üì≠ H√≠rlev√©l leiratkoz√°s meger≈ës√≠t√©se - Lovas Zolt√°n",
      html: emailHtml,
      text: `
Kedves ${name}!

Ez az email meger≈ës√≠ti, hogy sikeresen leiratkozott a h√≠rlevel√ºnkr≈ël.

Leiratkozott email c√≠m: ${email}

T√∂bb√© nem fog h√≠rlevelet kapni t≈ël√ºnk. Adatait biztons√°gosan t√°roljuk, de newsletter √ºzeneteket nem k√ºld√ºnk.

Ha k√©s≈ëbb √∫jra szeretne feliratkozni, megteheti a kapcsolat oldalon vagy a profil oldal√°n.

√údv√∂zlettel,
Lovas Zolt√°n csapata
      `,
    };

    // Priority 1: Try Gmail SMTP (production AND development)
    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'development' || process.env.FORCE_GMAIL === 'true') {
      const gmailTransporter = createGmailTransporter();
      if (gmailTransporter) {
        try {
          await gmailTransporter.sendMail(emailContent);
          console.log("‚úÖ Gmail SMTP - Leiratkoz√°s meger≈ës√≠t≈ë email sikeresen elk√ºldve!");
          return { success: true };
        } catch (error) {
          console.error('Gmail SMTP k√ºld√©si hiba:', error);
        }
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);
        console.log("‚úÖ Resend - Leiratkoz√°s meger≈ës√≠t≈ë email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview");
          console.log(`üìß Unsubscribe Confirmation Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    return { success: false, error: "Email service unavailable" };
  } catch (error) {
    console.error("Leiratkoz√°s meger≈ës√≠t≈ë email k√ºld√©si hiba:", error);
    return { success: false, error: "Failed to send unsubscribe confirmation" };
  }
}

// Admin notification for newsletter unsubscription
export async function sendUnsubscribeNotification(data: {
  name: string;
  email: string;
  unsubscribeTime: string;
  action?: string;
}) {
  try {
    console.log("Admin √©rtes√≠t≈ë email k√ºld√©se leiratkoz√°sr√≥l...", {
      to: "lovas.zoltan1986@gmail.com",
      environment: process.env.NODE_ENV,
      resendAvailable: !!resend,
    });

    const { name, email, unsubscribeTime, action } = data;

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #c53030;">üì≠ H√≠rlev√©l leiratkoz√°s t√∂rt√©nt</h2>
        
        <div style="background-color: #fed7d7; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #e53e3e;">
          <p><strong>Leiratkozott szem√©ly:</strong> ${name}</p>
          <p><strong>Email c√≠me:</strong> ${email}</p>
          <p><strong>Leiratkoz√°s id≈ëpontja:</strong> ${unsubscribeTime}</p>
          ${action ? `<p><strong>M≈±velet:</strong> ${action}</p>` : ''}
        </div>
        
        <div style="background-color: #f7fafc; padding: 15px; border-radius: 6px; margin: 20px 0;">
          <p style="margin: 0; font-size: 14px; color: #4a5568;">
            <strong>Biztons√°gi inform√°ci√≥:</strong> Ez az automatikus √©rtes√≠t√©s az√©rt j√∂tt l√©tre, 
            hogy nyomon k√∂vethesd a h√≠rlev√©l feliratkoz√°sok v√°ltoz√°sait.
          </p>
        </div>
        
        <hr style="margin: 30px 0; border: none; border-top: 1px solid #e2e8f0;">
        <p style="font-size: 12px; color: #718096;">
          Automatikus √©rtes√≠t√©s a Lovas Zolt√°n politikai oldal rendszer√©t≈ël.
        </p>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: "lovas.zoltan1986@gmail.com",
      replyTo: "lovas.zoltan1986@gmail.com",
      subject: "üì≠ ADMIN: H√≠rlev√©l leiratkoz√°s - " + email,
      html: emailHtml,
      text: `
H√çRLEV√âL LEIRATKOZ√ÅS

Leiratkozott szem√©ly: ${name}
Email c√≠me: ${email}
Leiratkoz√°s id≈ëpontja: ${unsubscribeTime}
${action ? `M≈±velet: ${action}` : ''}

Ez az automatikus √©rtes√≠t√©s az√©rt j√∂tt l√©tre, hogy nyomon k√∂vethesd a h√≠rlev√©l feliratkoz√°sok v√°ltoz√°sait.
      `,
    };

    // Priority 1: Try Gmail SMTP (production AND development)
    if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'development' || process.env.FORCE_GMAIL === 'true') {
      const gmailTransporter = createGmailTransporter();
      if (gmailTransporter) {
        try {
          await gmailTransporter.sendMail(emailContent);
          console.log("‚úÖ Gmail SMTP - Admin leiratkoz√°s √©rtes√≠t≈ë elk√ºldve!");
          return { success: true };
        } catch (error) {
          console.error('Gmail SMTP k√ºld√©si hiba:', error);
        }
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);
        console.log("‚úÖ Resend - Admin leiratkoz√°s √©rtes√≠t≈ë elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview");
          console.log(`üìß Admin Unsubscribe Notification Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    return { success: false, error: "Email service unavailable" };
  } catch (error) {
    console.error("Admin leiratkoz√°s √©rtes√≠t≈ë k√ºld√©si hiba:", error);
    return { success: false, error: "Failed to send admin notification" };
  }
}

// Create generic SMTP transporter
function createSMTPTransporter() {
  if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
    console.log('SMTP credentials not configured');
    return null;
  }

  return nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || '587'),
    secure: process.env.SMTP_SECURE === 'true',
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  });
}

// Petition verification email functionality
export async function sendPetitionVerificationEmail(
  email: string,
  firstName: string,
  petitionTitle: string,
  verificationToken: string,
  petitionId: string
): Promise<{ success: boolean; previewUrl?: string }> {
  try {
    const verificationUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/peticiok/${petitionId}/verify?token=${verificationToken}`;
    
    console.log("Pet√≠ci√≥ hiteles√≠t√©s email k√ºld√©se...", {
      to: email,
      petitionTitle,
      verificationUrl,
      environment: process.env.NODE_ENV
    });

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0; font-size: 24px;">Pet√≠ci√≥ Al√°√≠r√°s Meger≈ës√≠t√©se</h1>
        </div>
        
        <div style="padding: 30px; background-color: white;">
          <p style="font-size: 16px; color: #333;">Kedves ${firstName}!</p>
          
          <p style="color: #666;">K√∂sz√∂nj√ºk, hogy al√°√≠rta a k√∂vetkez≈ë pet√≠ci√≥t:</p>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-left: 4px solid #667eea; margin: 20px 0;">
            <strong style="color: #333; font-size: 16px;">${petitionTitle}</strong>
          </div>
          
          <p style="color: #666;">Az al√°√≠r√°s aktiv√°l√°s√°hoz k√©rj√ºk, kattintson az al√°bbi gombra:</p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" 
               style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                      color: white; text-decoration: none; padding: 15px 30px; border-radius: 6px; 
                      font-weight: bold; font-size: 16px;">
              Al√°√≠r√°s Meger≈ës√≠t√©se
            </a>
          </div>
          
          <p style="color: #666; font-size: 14px;">Ha a gomb nem m≈±k√∂dik, m√°solja be ezt a linket a b√∂ng√©sz≈ëj√©be:</p>
          <p style="word-break: break-all; color: #667eea; background-color: #f8f9fa; padding: 10px; border-radius: 4px; font-size: 14px;">${verificationUrl}</p>
          
          <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #856404;"><strong>Fontos:</strong> Ez a link 24 √≥r√°n bel√ºl lej√°r. Ha nem er≈ës√≠ti meg al√°√≠r√°s√°t ezen id≈ën bel√ºl, √∫jra kell al√°√≠rnia a pet√≠ci√≥t.</p>
          </div>
          
          <p style="color: #666; font-size: 14px;">Ha nem √ñn √≠rta al√° ezt a pet√≠ci√≥t, k√©rj√ºk, hagyja figyelmen k√≠v√ºl ezt az emailt.</p>
        </div>
        
        <div style="background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; border-radius: 0 0 8px 8px;">
          <p style="margin: 0;">Ez egy automatikus email. K√©rj√ºk, ne v√°laszoljon r√°.</p>
          <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform</p>
        </div>
      </div>
    `;

    // Email content for all services
    const emailContent = {
      from: '"Lovas Zolt√°n Pet√≠ci√≥k" <petition@example.com>',
      to: email,
      subject: `Pet√≠ci√≥ al√°√≠r√°s meger≈ës√≠t√©se - ${petitionTitle}`,
      html: emailHtml,
      text: `
Kedves ${firstName}!

K√∂sz√∂nj√ºk, hogy al√°√≠rta a k√∂vetkez≈ë pet√≠ci√≥t:
${petitionTitle}

Az al√°√≠r√°s aktiv√°l√°s√°hoz kattintson az al√°bbi linkre:
${verificationUrl}

Fontos: Ez a link 24 √≥r√°n bel√ºl lej√°r.

Ha nem √ñn √≠rta al√° ezt a pet√≠ci√≥t, k√©rj√ºk, hagyja figyelmen k√≠v√ºl ezt az emailt.

¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform
      `,
    };

    // Priority 1: Try Gmail SMTP (for real email sending)
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        const info = await gmailTransporter.sendMail({
          ...emailContent,
          from: `"Lovas Zolt√°n Pet√≠ci√≥k" <${process.env.GMAIL_USER}>`,
        });
        
        console.log("‚úÖ Gmail SMTP - Email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 2: Try generic SMTP
    const smtpTransporter = createSMTPTransporter();
    if (smtpTransporter) {
      try {
        const info = await smtpTransporter.sendMail(emailContent);
        
        console.log("‚úÖ SMTP - Email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('SMTP k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 3: Try Resend (production service)
    if (resend) {
      try {
        const emailResult = await resend?.emails.send({
          from: "Lovas Zolt√°n Pet√≠ci√≥k <onboarding@resend.dev>",
          to: email,
          subject: `Pet√≠ci√≥ al√°√≠r√°s meger≈ës√≠t√©se - ${petitionTitle}`,
          html: emailHtml,
        });

        console.log("‚úÖ Resend - Email sikeresen elk√ºldve!");
        console.log("Resend email eredm√©nye:", emailResult);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
        // Continue to fallback
      }
    }

    // Priority 4: Fallback to Ethereal Email (development preview only)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Email Preview URL: ${previewUrl}`);
          console.log(`üì¨ Email ID: ${info.messageId}`);
          
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    // Final fallback: Log email details
    console.log("‚ùå Egyetlen email szolg√°ltat√°s sem el√©rhet≈ë!");
    console.log(`üìß EMAIL PREVIEW (csak konzol):`);
    console.log(`To: ${email}`);
    console.log(`Subject: Pet√≠ci√≥ al√°√≠r√°s meger≈ës√≠t√©se - ${petitionTitle}`);
    console.log(`Verification URL: ${verificationUrl}`);
    console.log(`---`);
    console.log(`üîß Konfigur√°lja a Gmail SMTP-t vagy Resend API-t val√≥s email k√ºld√©shez!`);
    
    return { success: true };

  } catch (error) {
    console.error("Pet√≠ci√≥ hiteles√≠t√©s email k√ºld√©si hiba:", {
      error: error instanceof Error ? error.message : String(error),
      email,
      petitionTitle,
    });
    return { success: false };
  }
}

// Event registration confirmation email functionality
export async function sendEventRegistrationEmail(
  email: string,
  name: string,
  eventTitle: string,
  eventLocation: string,
  eventStartDate: string,
  eventEndDate: string
): Promise<{ success: boolean; previewUrl?: string }> {
  try {
    const eventDate = new Date(eventStartDate).toLocaleDateString('hu-HU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long'
    });
    
    const eventTime = new Date(eventStartDate).toLocaleTimeString('hu-HU', {
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const eventEndTime = new Date(eventEndDate).toLocaleTimeString('hu-HU', {
      hour: '2-digit',
      minute: '2-digit'
    });

    console.log("Esem√©ny regisztr√°ci√≥ email k√ºld√©se...", {
      to: email,
      eventTitle,
      eventDate,
      environment: process.env.NODE_ENV
    });

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0; font-size: 24px;">Esem√©ny Jelentkez√©s Meger≈ës√≠t√©se</h1>
        </div>
        
        <div style="padding: 30px; background-color: white;">
          <p style="font-size: 16px; color: #333;">Kedves ${name}!</p>
          
          <p style="color: #666;">K√∂sz√∂nj√ºk, hogy jelentkezett a k√∂vetkez≈ë esem√©nyre:</p>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-left: 4px solid #667eea; margin: 20px 0;">
            <strong style="color: #333; font-size: 18px;">${eventTitle}</strong>
          </div>
          
          <div style="background-color: #e3f2fd; padding: 20px; border-radius: 6px; margin: 20px 0;">
            <h3 style="margin: 0 0 15px 0; color: #1976d2;">üìÖ Esem√©ny r√©szletei</h3>
            <div style="color: #333;">
              <p style="margin: 5px 0;"><strong>üìÖ D√°tum:</strong> ${eventDate}</p>
              <p style="margin: 5px 0;"><strong>üïê Id≈ëpont:</strong> ${eventTime} - ${eventEndTime}</p>
              <p style="margin: 5px 0;"><strong>üìç Helysz√≠n:</strong> ${eventLocation}</p>
            </div>
          </div>
          
          <div style="background-color: #e8f5e8; border: 1px solid #4caf50; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #2e7d32;"><strong>‚úÖ Jelentkez√©se meger≈ës√≠tve!</strong></p>
            <p style="margin: 5px 0 0 0; color: #2e7d32;">V√°rjuk √ñnt az esem√©nyen! K√©rj√ºk, √©rkezzen id≈ëben.</p>
          </div>
          
          <div style="background-color: #fff3cd; border: 1px solid #ffc107; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #856404;"><strong>üí° Fontos tudnival√≥k:</strong></p>
            <ul style="margin: 10px 0 0 20px; color: #856404;">
              <li>K√©rj√ºk, √©rkezzen 10 perccel az esem√©ny kezdete el≈ëtt</li>
              <li>Hozza mag√°val ezt az email meger≈ës√≠t√©st (mobilon is elegend≈ë)</li>
              <li>V√°ltoz√°s eset√©n hamarosan √©rtes√≠tj√ºk</li>
            </ul>
          </div>
          
          <p style="color: #666; font-size: 14px; margin-top: 30px;">Ha k√©rd√©se van az esem√©nnyel kapcsolatban, ne habozzon kapcsolatba l√©pni vel√ºnk!</p>
        </div>
        
        <div style="background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; border-radius: 0 0 8px 8px;">
          <p style="margin: 0;">Ez egy automatikus email. K√©rj√ºk, ne v√°laszoljon r√°.</p>
          <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform</p>
        </div>
      </div>
    `;

    // Email content for all services
    const emailContent = {
      from: '"Lovas Zolt√°n Esem√©nyek" <events@example.com>',
      to: email,
      subject: `Esem√©ny jelentkez√©s meger≈ës√≠tve - ${eventTitle}`,
      html: emailHtml,
      text: `
Kedves ${name}!

K√∂sz√∂nj√ºk, hogy jelentkezett a k√∂vetkez≈ë esem√©nyre:
${eventTitle}

Esem√©ny r√©szletei:
üìÖ D√°tum: ${eventDate}
üïê Id≈ëpont: ${eventTime} - ${eventEndTime}
üìç Helysz√≠n: ${eventLocation}

‚úÖ Jelentkez√©se meger≈ës√≠tve!

Fontos tudnival√≥k:
- K√©rj√ºk, √©rkezzen 10 perccel az esem√©ny kezdete el≈ëtt
- Hozza mag√°val ezt az email meger≈ës√≠t√©st
- V√°ltoz√°s eset√©n hamarosan √©rtes√≠tj√ºk

¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform
      `,
    };

    // Priority 1: Try Gmail SMTP (for real email sending)
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        const info = await gmailTransporter.sendMail({
          ...emailContent,
          from: `"Lovas Zolt√°n Esem√©nyek" <${process.env.GMAIL_USER}>`,
        });
        
        console.log("‚úÖ Gmail SMTP - Esem√©ny email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP esem√©ny email k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 2: Try generic SMTP
    const smtpTransporter = createSMTPTransporter();
    if (smtpTransporter) {
      try {
        const info = await smtpTransporter.sendMail(emailContent);
        
        console.log("‚úÖ SMTP - Esem√©ny email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('SMTP esem√©ny email k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 3: Try Resend (production service)
    if (resend) {
      try {
        const emailResult = await resend?.emails.send({
          from: "Lovas Zolt√°n Esem√©nyek <onboarding@resend.dev>",
          to: email,
          subject: `Esem√©ny jelentkez√©s meger≈ës√≠tve - ${eventTitle}`,
          html: emailHtml,
        });

        console.log("‚úÖ Resend - Esem√©ny email sikeresen elk√ºldve!");
        console.log("Resend email eredm√©nye:", emailResult);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Resend esem√©ny email k√ºld√©si hiba:', error);
        // Continue to fallback
      }
    }

    // Priority 4: Fallback to Ethereal Email (development preview only)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Email Preview URL: ${previewUrl}`);
          console.log(`üì¨ Email ID: ${info.messageId}`);
          
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email esem√©ny k√ºld√©si hiba:', error);
        }
      }
    }

    // Final fallback: Log email details
    console.log("‚ùå Egyetlen email szolg√°ltat√°s sem el√©rhet≈ë!");
    console.log(`üìß ESEM√âNY EMAIL PREVIEW (csak konzol):`);
    console.log(`To: ${email}`);
    console.log(`Subject: Esem√©ny jelentkez√©s meger≈ës√≠tve - ${eventTitle}`);
    console.log(`Event: ${eventTitle} | ${eventDate} ${eventTime} | ${eventLocation}`);
    console.log(`---`);
    console.log(`üîß Konfigur√°lja a Gmail SMTP-t vagy Resend API-t val√≥s email k√ºld√©shez!`);
    
    return { success: true };

  } catch (error) {
    console.error("Esem√©ny regisztr√°ci√≥ email k√ºld√©si hiba:", {
      error: error instanceof Error ? error.message : String(error),
      email,
      eventTitle,
    });
    return { success: false };
  }
}

// Passwordless Authentication - Send 6-digit login code
export async function sendLoginCode(
  email: string,
  code: string,
  expiresInMinutes: number = 5
): Promise<{ success: boolean; previewUrl?: string; error?: string }> {
  try {
    console.log("Bejelentkez√©si k√≥d email k√ºld√©se...", {
      to: email,
      code: code.substring(0, 2) + "****", // Security: only log first 2 digits
      expiresInMinutes,
      environment: process.env.NODE_ENV
    });

    const emailHtml = `
      <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 20px; text-align: center;">
          <h1 style="color: white; margin: 0; font-size: 32px; font-weight: 300;">üîê Bejelentkez√©si K√≥d</h1>
          <p style="color: #f0f4f8; margin: 10px 0 0 0; font-size: 16px;">Biztons√°gos bel√©p√©s egyetlen k√≥ddal</p>
        </div>

        <div style="padding: 40px 20px;">
          <p style="color: #2d3748; font-size: 18px; margin-bottom: 30px;">
            Valaki (rem√©lhet≈ëleg √ñn) be szeretne l√©pni a Lovas Zolt√°n politikai oldalra ezzel az email c√≠mmel.
          </p>

          <div style="background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%); padding: 30px; border-radius: 12px; margin: 30px 0; text-align: center; border: 2px solid #667eea;">
            <p style="color: #4a5568; margin: 0 0 15px 0; font-size: 14px; text-transform: uppercase; letter-spacing: 1px; font-weight: 600;">Az √ñn bel√©p√©si k√≥dja:</p>
            <div style="font-size: 48px; font-weight: 700; letter-spacing: 8px; color: #667eea; font-family: 'Courier New', monospace; text-align: center; margin: 20px 0;">
              ${code}
            </div>
            <p style="color: #718096; margin: 15px 0 0 0; font-size: 12px;">
              Ez a k√≥d <strong>${expiresInMinutes} percig</strong> √©rv√©nyes
            </p>
          </div>

          <div style="background-color: #fff3cd; border-left: 4px solid #ffc107; padding: 20px; border-radius: 6px; margin: 30px 0;">
            <h4 style="color: #856404; margin: 0 0 10px 0; font-size: 16px;">‚è±Ô∏è Gyors bel√©p√©s</h4>
            <ol style="color: #856404; font-size: 14px; margin: 0; padding-left: 20px; line-height: 1.6;">
              <li>L√©pjen vissza a bejelentkez√©si oldalra</li>
              <li>√çrja be ezt a 6 jegy≈± k√≥dot</li>
              <li>Kattintson a "Bel√©p√©s" gombra</li>
            </ol>
          </div>

          <div style="background-color: #fee; border-left: 4px solid #f56565; padding: 20px; border-radius: 6px; margin: 30px 0;">
            <h4 style="color: #c53030; margin: 0 0 10px 0; font-size: 16px;">üõ°Ô∏è Biztons√°gi figyelmeztet√©s</h4>
            <p style="color: #742a2a; font-size: 14px; margin: 0; line-height: 1.6;">
              <strong>Soha ne ossza meg ezt a k√≥dot senkivel!</strong> Ez a k√≥d csak √ñnnek sz√≥l.
              Ha nem √ñn k√©rte ezt a k√≥dot, k√©rj√ºk hagyja figyelmen k√≠v√ºl ezt az emailt √©s forduljon hozz√°nk.
            </p>
          </div>

          <div style="text-align: center; padding: 30px 20px; background-color: #f7fafc; border-radius: 8px; margin: 30px 0;">
            <p style="color: #4a5568; font-size: 14px; margin: 0 0 10px 0;">
              Nem m≈±k√∂dik a k√≥d? K√©rjen √∫jat a bejelentkez√©si oldalon.
            </p>
            <p style="color: #718096; font-size: 12px; margin: 0;">
              A biztons√°ga √©rdek√©ben egyszerre csak egy k√≥d lehet akt√≠v.
            </p>
          </div>
        </div>

        <div style="background-color: #2d3748; padding: 30px 20px; text-align: center; color: #e2e8f0; font-size: 13px;">
          <p style="margin: 0 0 10px 0;">
            Ezt az emailt a Lovas Zolt√°n politikai oldal biztons√°gi rendszere k√ºldte.
          </p>
          <p style="margin: 0; color: #a0aec0; font-size: 12px;">
            Passwordless Authentication | ${new Date().toLocaleString('hu-HU')}
          </p>
        </div>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: email,
      subject: `üîê Bel√©p√©si k√≥d: ${code} - Lovas Zolt√°n`,
      html: emailHtml,
      text: `
Bejelentkez√©si k√≥d

Valaki (rem√©lhet≈ëleg √ñn) be szeretne l√©pni a Lovas Zolt√°n politikai oldalra ezzel az email c√≠mmel.

Az √ñn bel√©p√©si k√≥dja: ${code}

Ez a k√≥d ${expiresInMinutes} percig √©rv√©nyes.

FIGYELEM: Soha ne ossza meg ezt a k√≥dot senkivel!
Ha nem √ñn k√©rte ezt a k√≥dot, hagyja figyelmen k√≠v√ºl ezt az emailt.

√údv√∂zlettel,
Lovas Zolt√°n csapata
      `,
    };

    // Priority 1: Try Resend (using sandbox email)
    if (resend) {
      try {
        const emailResult = await resend.emails.send({
          ...emailContent,
          from: "Lovas Zolt√°n Bejelentkez√©s <onboarding@resend.dev>", // Sandbox email - works without domain verification
        });

        // Check if Resend returned an error (it doesn't throw exceptions)
        if (emailResult.error) {
          console.error('Resend k√ºld√©si hiba:', emailResult.error);
          // Continue to Gmail fallback
        } else {
          console.log("‚úÖ Resend - Bel√©p√©si k√≥d email sikeresen elk√ºldve!");
          console.log("Resend email eredm√©nye:", emailResult);
          return { success: true };
        }
      } catch (error) {
        console.error('Resend exception:', error);
        // Continue to Gmail fallback
      }
    }

    // Priority 2: Try Gmail SMTP (if configured)
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        await gmailTransporter.sendMail(emailContent);
        console.log("‚úÖ Gmail SMTP - Bel√©p√©si k√≥d email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Login Code Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    console.log("‚ùå Bel√©p√©si k√≥d email k√ºld√©se sikertelen!");
    return { success: false, error: "Email service unavailable" };
  } catch (error) {
    console.error("Bel√©p√©si k√≥d email k√ºld√©si hiba:", error);
    return { success: false, error: "Failed to send login code email" };
  }
}

// Welcome email for first-time users (after first login)
export async function sendWelcomeEmail(
  email: string,
  name: string
): Promise<{ success: boolean; previewUrl?: string; error?: string }> {
  try {
    console.log("√údv√∂zl≈ë email k√ºld√©se els≈ë bejelentkez√©skor...", {
      to: email,
      name,
      environment: process.env.NODE_ENV
    });

    const websiteUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000';

    const emailHtml = `
      <div style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 650px; margin: 0 auto; background-color: #ffffff;">
        <!-- Header with gradient -->
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 50px 30px; text-align: center;">
          <h1 style="color: white; margin: 0; font-size: 36px; font-weight: 700; letter-spacing: -0.5px;">
            üéâ √údv√∂z√∂lj√ºk!
          </h1>
          <p style="color: #f0f4f8; margin: 15px 0 0 0; font-size: 18px; font-weight: 300;">
            K√∂sz√∂nj√ºk, hogy csatlakozott hozz√°nk!
          </p>
        </div>

        <!-- Main content -->
        <div style="padding: 40px 30px;">
          <h2 style="color: #2d3748; margin-bottom: 20px; font-size: 24px;">Kedves ${name}!</h2>

          <p style="color: #4a5568; font-size: 16px; line-height: 1.8; margin-bottom: 25px;">
            √ñr√∂mmel k√∂sz√∂ntj√ºk √ñnt platformunkon! Sikeresen l√©trehozta fi√≥kj√°t, √©s mostant√≥l hozz√°f√©rhet minden
            funkci√≥hoz, amely seg√≠t abban, hogy akt√≠van r√©szt vegyen demokratikus k√∂z√©let√ºnkben.
          </p>

          <!-- What you can do section -->
          <div style="background: linear-gradient(135deg, #f0f4f8 0%, #e2e8f0 100%); padding: 30px; border-radius: 12px; margin: 30px 0;">
            <h3 style="color: #2d3748; margin: 0 0 20px 0; font-size: 20px; display: flex; align-items: center;">
              üöÄ Mit tehet platformunkon?
            </h3>
            <div style="space-y: 15px;">
              <div style="margin-bottom: 15px;">
                <div style="display: flex; align-items: start; margin-bottom: 12px;">
                  <span style="font-size: 24px; margin-right: 12px;">üì∞</span>
                  <div>
                    <strong style="color: #2d3748; font-size: 16px;">H√≠rek √©s Cikkek</strong>
                    <p style="color: #4a5568; font-size: 14px; margin: 5px 0 0 0; line-height: 1.6;">
                      √ârtes√ºlj a legfrissebb politikai fejlem√©nyekr≈ël, helyi esem√©nyekr≈ël √©s √°ll√°spontjaimr√≥l
                    </p>
                  </div>
                </div>
              </div>

              <div style="margin-bottom: 15px;">
                <div style="display: flex; align-items: start; margin-bottom: 12px;">
                  <span style="font-size: 24px; margin-right: 12px;">üìÖ</span>
                  <div>
                    <strong style="color: #2d3748; font-size: 16px;">Esem√©nyek √©s Programok</strong>
                    <p style="color: #4a5568; font-size: 14px; margin: 5px 0 0 0; line-height: 1.6;">
                      Jelentkezz rendezv√©nyeinkre, tal√°lkoz√≥kra √©s k√∂z√∂ss√©gi esem√©nyekre
                    </p>
                  </div>
                </div>
              </div>

              <div style="margin-bottom: 15px;">
                <div style="display: flex; align-items: start; margin-bottom: 12px;">
                  <span style="font-size: 24px; margin-right: 12px;">üß†</span>
                  <div>
                    <strong style="color: #2d3748; font-size: 16px;">Kv√≠zek √©s Tud√°stesztek</strong>
                    <p style="color: #4a5568; font-size: 14px; margin: 5px 0 0 0; line-height: 1.6;">
                      Teszteld tud√°sodat politikai, k√∂z√©leti √©s EU-s t√©m√°kban
                    </p>
                  </div>
                </div>
              </div>

              <div style="margin-bottom: 15px;">
                <div style="display: flex; align-items: start; margin-bottom: 12px;">
                  <span style="font-size: 24px; margin-right: 12px;">‚úçÔ∏è</span>
                  <div>
                    <strong style="color: #2d3748; font-size: 16px;">Pet√≠ci√≥k √©s Szavaz√°sok</strong>
                    <p style="color: #4a5568; font-size: 14px; margin: 5px 0 0 0; line-height: 1.6;">
                      T√°mogass fontos √ºgyeket √©s mondd el v√©lem√©nyedet k√∂z√∂ss√©gi szavaz√°sokon
                    </p>
                  </div>
                </div>
              </div>

              <div style="margin-bottom: 0;">
                <div style="display: flex; align-items: start;">
                  <span style="font-size: 24px; margin-right: 12px;">üèõÔ∏è</span>
                  <div>
                    <strong style="color: #2d3748; font-size: 16px;">Programjaim</strong>
                    <p style="color: #4a5568; font-size: 14px; margin: 5px 0 0 0; line-height: 1.6;">
                      Ismerd meg politikai elk√©pzel√©seimet √©s j√∂v≈ëk√©pemet Budapest V. ker√ºlet√©√©rt
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Our values -->
          <div style="background: linear-gradient(135deg, #e6fffa 0%, #b2f5ea 50%); padding: 30px; border-radius: 12px; margin: 30px 0; border-left: 5px solid #38b2ac;">
            <h3 style="color: #234e52; margin: 0 0 20px 0; font-size: 20px;">
              üíö √ârt√©keink
            </h3>
            <ul style="color: #2c7a7b; font-size: 15px; line-height: 2; margin: 0; padding-left: 25px;">
              <li><strong>√Åtl√°that√≥s√°g:</strong> Ny√≠lt kommunik√°ci√≥ √©s sz√°monk√©rhet≈ës√©g</li>
              <li><strong>K√∂z√∂ss√©g:</strong> Egy√ºtt dolgozunk egy jobb j√∂v≈ë√©rt</li>
              <li><strong>Innov√°ci√≥:</strong> Modern megold√°sok hagyom√°nyos √©rt√©kekkel</li>
              <li><strong>Fenntarthat√≥s√°g:</strong> K√∂rnyezettudatos fejleszt√©sek √©s z√∂ld j√∂v≈ë</li>
              <li><strong>Szolg√°lat:</strong> A k√∂z√∂ss√©g √©rdeke mindenek felett</li>
            </ul>
          </div>

          <!-- CTA Buttons -->
          <div style="text-align: center; margin: 40px 0;">
            <a href="${websiteUrl}"
               style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; text-decoration: none; padding: 16px 40px; border-radius: 8px;
                      font-weight: 600; font-size: 16px; margin: 10px; box-shadow: 0 4px 6px rgba(102, 126, 234, 0.3);">
              üè† F≈ëoldal megtekint√©se
            </a>

            <a href="${websiteUrl}/program"
               style="display: inline-block; background: white;
                      color: #667eea; text-decoration: none; padding: 16px 40px; border-radius: 8px;
                      font-weight: 600; font-size: 16px; margin: 10px; border: 2px solid #667eea;">
              üìã Programjaim
            </a>
          </div>

          <!-- Contact info -->
          <div style="background-color: #f7fafc; padding: 25px; border-radius: 8px; margin: 30px 0; border: 1px solid #e2e8f0;">
            <h4 style="color: #2d3748; margin: 0 0 15px 0; font-size: 16px;">
              üìß K√©rd√©se van?
            </h4>
            <p style="color: #4a5568; font-size: 14px; margin: 0; line-height: 1.6;">
              Ne habozzon kapcsolatba l√©pni velem! Minden visszajelz√©st √©s k√©rd√©st sz√≠vesen fogadok.
              √çrjon nek√ºnk a <a href="${websiteUrl}/kapcsolat" style="color: #667eea; text-decoration: none; font-weight: 600;">kapcsolat oldalon</a>,
              vagy v√°laszoljon erre az emailre.
            </p>
          </div>

          <div style="text-align: center; margin: 40px 0 20px 0;">
            <p style="color: #718096; font-size: 15px; line-height: 1.8; margin: 0;">
              K√∂sz√∂n√∂m, hogy csatlakozott! Egy√ºtt dolgozunk egy jobb j√∂v≈ë√©rt. üåü
            </p>
            <p style="color: #2d3748; font-size: 16px; font-weight: 600; margin: 20px 0 0 0;">
              √údv√∂zlettel,<br/>
              <span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; font-size: 18px;">
                Lovas Zolt√°n Gy√∂rgy
              </span>
            </p>
          </div>
        </div>

        <!-- Footer -->
        <div style="background-color: #2d3748; padding: 30px; text-align: center; color: #e2e8f0;">
          <p style="margin: 0 0 10px 0; font-size: 14px;">
            Ezt az emailt automatikusan k√ºldte a Lovas Zolt√°n platformja
          </p>
          <p style="margin: 0; color: #a0aec0; font-size: 12px;">
            ¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform | Budapest V. ker√ºlet
          </p>
          <p style="margin: 10px 0 0 0; font-size: 12px;">
            <a href="${websiteUrl}" style="color: #81e6d9; text-decoration: none; margin: 0 10px;">Weboldal</a> |
            <a href="${websiteUrl}/kapcsolat" style="color: #81e6d9; text-decoration: none; margin: 0 10px;">Kapcsolat</a> |
            <a href="${websiteUrl}/program" style="color: #81e6d9; text-decoration: none; margin: 0 10px;">Programjaim</a>
          </p>
        </div>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: email,
      replyTo: "lovas.zoltan1986@gmail.com",
      subject: "üéâ √údv√∂z√∂lj√ºk! Sikeres regisztr√°ci√≥ - Lovas Zolt√°n",
      html: emailHtml,
      text: `
Kedves ${name}!

√ñr√∂mmel k√∂sz√∂ntj√ºk √ñnt platformunkon!

Sikeresen l√©trehozta fi√≥kj√°t, √©s mostant√≥l hozz√°f√©rhet minden funkci√≥hoz, amely seg√≠t abban, hogy akt√≠van r√©szt vegyen demokratikus k√∂z√©let√ºnkben.

Mit tehet platformunkon?

üì∞ H√≠rek √©s Cikkek
√ârtes√ºlj a legfrissebb politikai fejlem√©nyekr≈ël, helyi esem√©nyekr≈ël √©s √°ll√°spontjaimr√≥l

üìÖ Esem√©nyek √©s Programok
Jelentkezz rendezv√©nyeinkre, tal√°lkoz√≥kra √©s k√∂z√∂ss√©gi esem√©nyekre

üß† Kv√≠zek √©s Tud√°stesztek
Teszteld tud√°sodat politikai, k√∂z√©leti √©s EU-s t√©m√°kban

‚úçÔ∏è Pet√≠ci√≥k √©s Szavaz√°sok
T√°mogass fontos √ºgyeket √©s mondd el v√©lem√©nyedet k√∂z√∂ss√©gi szavaz√°sokon

üèõÔ∏è Programjaim
Ismerd meg politikai elk√©pzel√©seimet √©s j√∂v≈ëk√©pemet Budapest V. ker√ºlet√©√©rt

üíö √ârt√©keink

‚Ä¢ √Åtl√°that√≥s√°g: Ny√≠lt kommunik√°ci√≥ √©s sz√°monk√©rhet≈ës√©g
‚Ä¢ K√∂z√∂ss√©g: Egy√ºtt dolgozunk egy jobb j√∂v≈ë√©rt
‚Ä¢ Innov√°ci√≥: Modern megold√°sok hagyom√°nyos √©rt√©kekkel
‚Ä¢ Fenntarthat√≥s√°g: K√∂rnyezettudatos fejleszt√©sek √©s z√∂ld j√∂v≈ë
‚Ä¢ Szolg√°lat: A k√∂z√∂ss√©g √©rdeke mindenek felett

L√°togasson el weboldalunkra: ${websiteUrl}
N√©zze meg programjaimat: ${websiteUrl}/program

K√©rd√©se van?
Ne habozzon kapcsolatba l√©pni velem! Minden visszajelz√©st √©s k√©rd√©st sz√≠vesen fogadok.

K√∂sz√∂n√∂m, hogy csatlakozott! Egy√ºtt dolgozunk egy jobb j√∂v≈ë√©rt.

√údv√∂zlettel,
Lovas Zolt√°n Gy√∂rgy

¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform
      `,
    };

    // Priority 1: Try Gmail SMTP
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        await gmailTransporter.sendMail(emailContent);
        console.log("‚úÖ Gmail SMTP - √údv√∂zl≈ë email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP k√ºld√©si hiba:', error);
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);
        console.log("‚úÖ Resend - √údv√∂zl≈ë email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview");
          console.log(`üìß Welcome Email Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    return { success: false, error: "Email service unavailable" };
  } catch (error) {
    console.error("√údv√∂zl≈ë email k√ºld√©si hiba:", error);
    return { success: false, error: "Failed to send welcome email" };
  }
}

// Report notification email for users
export async function sendReportNotificationEmail(data: {
  to: string;
  reportId: string;
  title: string;
  category: string;
  addressText: string;
  urgency: string;
  userName: string;
}): Promise<{ success: boolean; previewUrl?: string }> {
  try {
    console.log("Bejelent√©s √©rtes√≠t≈ë email k√ºld√©se...", {
      to: data.to,
      reportId: data.reportId,
      environment: process.env.NODE_ENV
    });

    const reportDetailUrl = `${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/bejelentes/${data.reportId}`;

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0; font-size: 28px;">‚úÖ Bejelent√©s Sikeresen R√∂gz√≠tve</h1>
        </div>

        <div style="padding: 30px; background-color: white;">
          <p style="font-size: 16px; color: #333;">Tisztelt ${data.userName}!</p>

          <p style="color: #666;">K√∂sz√∂nj√ºk bejelent√©s√©t! A rendszerben sikeresen r√∂gz√≠tett√ºk az al√°bbi azonos√≠t√≥val:</p>

          <div style="background-color: #e3f2fd; padding: 20px; border-left: 4px solid #2196f3; margin: 20px 0; text-align: center;">
            <p style="margin: 0 0 10px 0; color: #1976d2; font-size: 14px; text-transform: uppercase;">Azonos√≠t√≥</p>
            <p style="font-size: 20px; font-weight: bold; color: #1565c0; margin: 0; font-family: monospace; letter-spacing: 1px;">${data.reportId.slice(0, 12).toUpperCase()}</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 6px; margin: 20px 0;">
            <h3 style="margin: 0 0 15px 0; color: #2d3748;">üìã Bejelent√©s r√©szletei</h3>
            <div style="color: #333;">
              <p style="margin: 8px 0;"><strong>C√≠m:</strong> ${data.title}</p>
              <p style="margin: 8px 0;"><strong>Kateg√≥ria:</strong> ${data.category}</p>
              <p style="margin: 8px 0;"><strong>Helysz√≠n:</strong> ${data.addressText}</p>
              <p style="margin: 8px 0;"><strong>S√ºrg≈ëss√©g:</strong> ${data.urgency}</p>
              <p style="margin: 8px 0;"><strong>St√°tusz:</strong> F√ºgg≈ëben</p>
            </div>
          </div>

          <div style="background-color: #e8f5e8; border: 1px solid #4caf50; border-radius: 6px; padding: 20px; margin: 20px 0;">
            <h3 style="margin: 0 0 15px 0; color: #2e7d32;">üîÑ Mi t√∂rt√©nik ezut√°n?</h3>
            <ul style="margin: 0; padding-left: 20px; color: #2e7d32; line-height: 1.8;">
              <li>A bejelent√©st tov√°bb√≠tjuk a megfelel≈ë hivatali oszt√°lyhoz</li>
              <li>E-mailben √©rtes√≠t√©st kap a st√°tusz v√°ltoz√°sokr√≥l</li>
              <li>A bejelent√©s √°llapot√°t b√°rmikor ellen≈ërizheti a profilj√°ban</li>
              <li>V√°laszid≈ë: √°ltal√°ban 5-15 munkanap</li>
            </ul>
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <a href="${reportDetailUrl}"
               style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white; text-decoration: none; padding: 15px 30px; border-radius: 8px;
                      font-weight: 600; font-size: 16px;">
              üìÑ Bejelent√©s Megtekint√©se
            </a>
          </div>

          <div style="background-color: #fff3cd; border: 1px solid #ffc107; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #856404; font-size: 14px;">
              <strong>üí° Tipp:</strong> Mentse el a bejelent√©s azonos√≠t√≥j√°t, hogy k√©s≈ëbb k√∂nnyen megtal√°lhassa!
            </p>
          </div>

          <p style="color: #666; font-size: 14px; margin-top: 30px;">
            K√©rd√©s eset√©n vegye fel a kapcsolatot a k√©pvisel≈ëi irod√°val.
          </p>
        </div>

        <div style="background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; border-radius: 0 0 8px 8px;">
          <p style="margin: 0;">Ez egy automatikus √©rtes√≠t≈ë email. K√©rj√ºk, ne v√°laszoljon r√°.</p>
          <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform</p>
        </div>
      </div>
    `;

    const emailContent = {
      from: process.env.GMAIL_USER || "noreply@lovaszoltan.dev",
      to: data.to,
      replyTo: "lovas.zoltan1986@gmail.com",
      subject: `Bejelent√©s sikeresen r√∂gz√≠tve - #${data.reportId.slice(0, 12).toUpperCase()}`,
      html: emailHtml,
      text: `
Tisztelt ${data.userName}!

K√∂sz√∂nj√ºk bejelent√©s√©t! A rendszerben sikeresen r√∂gz√≠tett√ºk az al√°bbi azonos√≠t√≥val:

Azonos√≠t√≥: ${data.reportId}

Bejelent√©s r√©szletei:
‚Ä¢ C√≠m: ${data.title}
‚Ä¢ Kateg√≥ria: ${data.category}
‚Ä¢ Helysz√≠n: ${data.addressText}
‚Ä¢ S√ºrg≈ëss√©g: ${data.urgency}
‚Ä¢ St√°tusz: F√ºgg≈ëben

Mi t√∂rt√©nik ezut√°n?
‚Ä¢ A bejelent√©st tov√°bb√≠tjuk a megfelel≈ë hivatali oszt√°lyhoz
‚Ä¢ E-mailben √©rtes√≠t√©st kap a st√°tusz v√°ltoz√°sokr√≥l
‚Ä¢ A bejelent√©s √°llapot√°t b√°rmikor ellen≈ërizheti a profilj√°ban
‚Ä¢ V√°laszid≈ë: √°ltal√°ban 5-15 munkanap

Bejelent√©s megtekint√©se: ${reportDetailUrl}

K√©rd√©s eset√©n vegye fel a kapcsolatot a k√©pvisel≈ëi irod√°val.

¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform
      `,
    };

    // Priority 1: Try Gmail SMTP
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        await gmailTransporter.sendMail(emailContent);
        console.log("‚úÖ Gmail SMTP - Bejelent√©s √©rtes√≠t≈ë email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP k√ºld√©si hiba:', error);
      }
    }

    // Priority 2: Try Resend
    if (resend) {
      try {
        const emailResult = await resend.emails.send(emailContent);
        console.log("‚úÖ Resend - Bejelent√©s √©rtes√≠t≈ë email sikeresen elk√ºldve!");
        return { success: true };
      } catch (error) {
        console.error('Resend k√ºld√©si hiba:', error);
      }
    }

    // Priority 3: Fallback to Ethereal Email (development preview)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview");
          console.log(`üìß Report Notification Preview: ${previewUrl}`);
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email k√ºld√©si hiba:', error);
        }
      }
    }

    console.log("‚ùå Bejelent√©s √©rtes√≠t≈ë email k√ºld√©se sikertelen!");
    return { success: false };
  } catch (error) {
    console.error("Bejelent√©s √©rtes√≠t≈ë email k√ºld√©si hiba:", error);
    return { success: false };
  }
}

// Report status update email notification
export async function sendReportStatusUpdateEmail(data: {
  to: string;
  reportId: string;
  title: string;
  oldStatus: string;
  newStatus: string;
  comment?: string | null;
  userName: string;
}): Promise<{ success: boolean; previewUrl?: string }> {

  const statusLabels: Record<string, string> = {
    PENDING: 'F√ºgg≈ëben',
    IN_REVIEW: 'Vizsg√°lat alatt',
    IN_PROGRESS: 'Folyamatban',
    RESOLVED: 'Megoldva',
    REJECTED: 'Elutas√≠tva',
    CLOSED: 'Lez√°rva',
  };

  const statusColors: Record<string, string> = {
    PENDING: '#F59E0B',
    IN_REVIEW: '#3B82F6',
    IN_PROGRESS: '#8B5CF6',
    RESOLVED: '#10B981',
    REJECTED: '#EF4444',
    CLOSED: '#6B7280',
  };

  const reportDetailUrl = `${process.env.NEXTAUTH_URL}/bejelentes/${data.reportId}`;

  const emailHtml = `
    <!DOCTYPE html>
    <html lang="hu">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Bejelent√©s st√°tusz friss√≠t√©s</title>
    </head>
    <body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f3f4f6;">
      <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff;">

        <!-- Header -->
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px 30px; text-align: center;">
          <h1 style="color: #ffffff; margin: 0; font-size: 28px; font-weight: 700;">
            üì¢ Bejelent√©s friss√≠tve
          </h1>
        </div>

        <!-- Content -->
        <div style="padding: 40px 30px;">

          <p style="font-size: 16px; line-height: 1.6; color: #374151; margin: 0 0 20px 0;">
            Tisztelt <strong>${data.userName}</strong>!
          </p>

          <p style="font-size: 16px; line-height: 1.6; color: #374151; margin: 0 0 30px 0;">
            Friss√≠t√©s t√∂rt√©nt az √ñn bejelent√©s√©vel kapcsolatban:
          </p>

          <!-- Report ID Badge -->
          <div style="background-color: #e0e7ff; border-radius: 8px; padding: 20px; text-align: center; margin-bottom: 30px;">
            <p style="margin: 0 0 10px 0; font-size: 14px; color: #6366f1; font-weight: 600; text-transform: uppercase; letter-spacing: 1px;">
              Azonos√≠t√≥
            </p>
            <p style="margin: 0; font-size: 20px; font-weight: 700; color: #4f46e5; font-family: 'Courier New', monospace; letter-spacing: 1px;">
              ${data.reportId.slice(0, 12).toUpperCase()}
            </p>
          </div>

          <!-- Report Title -->
          <div style="border-left: 4px solid #6366f1; padding-left: 20px; margin-bottom: 30px;">
            <p style="margin: 0; font-size: 14px; color: #6b7280; text-transform: uppercase; letter-spacing: 1px; font-weight: 600;">
              Bejelent√©s c√≠me
            </p>
            <p style="margin: 10px 0 0 0; font-size: 18px; color: #111827; font-weight: 600;">
              ${data.title}
            </p>
          </div>

          <!-- Status Change -->
          <div style="background-color: #f9fafb; border-radius: 12px; padding: 25px; margin-bottom: 30px;">
            <p style="margin: 0 0 20px 0; font-size: 16px; color: #374151; font-weight: 600;">
              St√°tusz v√°ltoz√°s:
            </p>

            <div style="display: flex; align-items: center; justify-content: center; gap: 20px;">
              <div style="text-align: center;">
                <div style="background-color: ${statusColors[data.oldStatus] || '#6B7280'}; color: #ffffff; padding: 10px 20px; border-radius: 20px; font-weight: 600; font-size: 14px; display: inline-block;">
                  ${statusLabels[data.oldStatus] || data.oldStatus}
                </div>
              </div>

              <div style="font-size: 24px; color: #9ca3af;">‚Üí</div>

              <div style="text-align: center;">
                <div style="background-color: ${statusColors[data.newStatus] || '#6B7280'}; color: #ffffff; padding: 10px 20px; border-radius: 20px; font-weight: 600; font-size: 14px; display: inline-block; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                  ${statusLabels[data.newStatus] || data.newStatus}
                </div>
              </div>
            </div>
          </div>

          ${data.comment ? `
          <!-- Admin Comment -->
          <div style="background-color: #fffbeb; border-left: 4px solid #f59e0b; border-radius: 8px; padding: 20px; margin-bottom: 30px;">
            <div style="display: flex; align-items: start; gap: 12px;">
              <div style="flex-shrink: 0; margin-top: 2px;">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                </svg>
              </div>
              <div style="flex: 1;">
                <p style="margin: 0 0 8px 0; font-size: 14px; color: #92400e; font-weight: 600; text-transform: uppercase; letter-spacing: 1px;">
                  √úzenet az adminisztr√°tort√≥l
                </p>
                <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #78350f; white-space: pre-wrap;">
                  ${data.comment}
                </p>
              </div>
            </div>
          </div>
          ` : ''}

          <!-- What's Next Section -->
          <div style="background: linear-gradient(135deg, #e0e7ff 0%, #f3e8ff 100%); border-radius: 12px; padding: 25px; margin-bottom: 30px;">
            <h3 style="margin: 0 0 15px 0; font-size: 18px; color: #4f46e5; font-weight: 700;">
              üîî Mi t√∂rt√©nik ezut√°n?
            </h3>
            ${data.newStatus === 'IN_REVIEW' ? `
              <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #4c1d95;">
                Bejelent√©s√©t jelenleg vizsg√°ljuk. Munkat√°rsaink √°ttekintik az √ºgyet √©s hamarosan tov√°bbi l√©p√©seket tesz√ºnk.
              </p>
            ` : ''}
            ${data.newStatus === 'IN_PROGRESS' ? `
              <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #4c1d95;">
                Az √ºgy feldolgoz√°sa megkezd≈ëd√∂tt! Akt√≠van dolgozunk a bejelent√©se megold√°s√°n. √ârtes√≠tj√ºk, amint √∫jabb fejlem√©ny t√∂rt√©nik.
              </p>
            ` : ''}
            ${data.newStatus === 'RESOLVED' ? `
              <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #4c1d95;">
                ‚úÖ J√≥ h√≠r√ºnk van! Az √ñn bejelent√©s√©t sikeresen megoldottuk. K√∂sz√∂nj√ºk, hogy jelz√©ssel hozz√°j√°rult k√∂z√∂ss√©g√ºnk jobb√° t√©tel√©hez!
              </p>
            ` : ''}
            ${data.newStatus === 'REJECTED' ? `
              <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #4c1d95;">
                Sajnos bejelent√©s√©t nem tudtuk elfogadni. Tov√°bbi inform√°ci√≥k√©rt tekintse meg a r√©szleteket a bejelent√©s oldal√°n.
              </p>
            ` : ''}
            ${data.newStatus === 'PENDING' ? `
              <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #4c1d95;">
                Bejelent√©se v√°rakoz√°si list√°ra ker√ºlt. Amint lehet≈ës√©g√ºnk van r√°, foglalkozni fogunk az √ºggyel.
              </p>
            ` : ''}
          </div>

          <!-- CTA Button -->
          <div style="text-align: center; margin-bottom: 30px;">
            <a href="${reportDetailUrl}"
               style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #ffffff; text-decoration: none; padding: 16px 40px; border-radius: 30px; font-weight: 700; font-size: 16px; box-shadow: 0 4px 6px rgba(102, 126, 234, 0.4); transition: all 0.3s ease;">
              Bejelent√©s megtekint√©se ‚Üí
            </a>
          </div>

          <!-- Help Section -->
          <div style="border-top: 2px solid #e5e7eb; padding-top: 25px; margin-top: 30px;">
            <p style="margin: 0 0 15px 0; font-size: 15px; line-height: 1.6; color: #6b7280;">
              <strong>K√©rd√©se van?</strong> V√°laszoljon erre az emailre vagy l√©pjen kapcsolatba vel√ºnk a <a href="${process.env.NEXTAUTH_URL}/kapcsolat" style="color: #6366f1; text-decoration: none; font-weight: 600;">kapcsolat oldalon</a>.
            </p>
            <p style="margin: 0; font-size: 15px; line-height: 1.6; color: #6b7280;">
              Nyomon k√∂vetheti bejelent√©s√©nek √°llapot√°t az online rendszer√ºnkben b√°rmikor.
            </p>
          </div>

        </div>

        <!-- Footer -->
        <div style="background-color: #f9fafb; padding: 30px; text-align: center; border-top: 1px solid #e5e7eb;">
          <p style="margin: 0 0 10px 0; font-size: 14px; color: #6b7280;">
            K√∂sz√∂nj√ºk, hogy akt√≠van r√©szt vesz k√∂z√∂ss√©g√ºnk √©let√©ben!
          </p>
          <p style="margin: 0; font-size: 13px; color: #9ca3af;">
            Ez egy automatikus √©rtes√≠t√©s. K√©rj√ºk, ne v√°laszoljon k√∂zvetlen√ºl erre az emailre.
          </p>
        </div>

      </div>
    </body>
    </html>
  `;

  const textContent = `
Bejelent√©s st√°tusz friss√≠t√©s

Tisztelt ${data.userName}!

Friss√≠t√©s t√∂rt√©nt az √ñn bejelent√©s√©vel kapcsolatban.

Azonos√≠t√≥: ${data.reportId.slice(0, 12).toUpperCase()}
C√≠m: ${data.title}

St√°tusz v√°ltoz√°s: ${statusLabels[data.oldStatus]} ‚Üí ${statusLabels[data.newStatus]}

${data.comment ? `\n√úzenet az adminisztr√°tort√≥l:\n${data.comment}\n` : ''}

Bejelent√©s megtekint√©se: ${reportDetailUrl}

K√∂sz√∂nj√ºk, hogy akt√≠van r√©szt vesz k√∂z√∂ss√©g√ºnk √©let√©ben!
  `.trim();

  const emailContent = {
    from: process.env.GMAIL_USER || process.env.SMTP_USER || 'noreply@example.com',
    to: data.to,
    subject: `üîî Bejelent√©s friss√≠tve: ${data.title}`,
    text: textContent,
    html: emailHtml,
  };

  // Priority 1: Try Gmail SMTP (most reliable for production)
  const gmailTransporter = createGmailTransporter();
  if (gmailTransporter) {
    try {
      await gmailTransporter.sendMail(emailContent);
      console.log('[EMAIL] ‚úÖ Status update email sent via Gmail SMTP to:', data.to);
      return { success: true };
    } catch (gmailError) {
      console.error('[EMAIL] ‚ùå Gmail SMTP failed:', gmailError);
    }
  }

  // Priority 2: Try Resend
  if (process.env.RESEND_API_KEY) {
    try {
      const resend = new Resend(process.env.RESEND_API_KEY);
      await resend.emails.send({
        from: 'Bejelent√©sek <onboarding@resend.dev>',
        to: data.to,
        subject: emailContent.subject,
        html: emailHtml,
        text: textContent,
      });
      console.log('[EMAIL] ‚úÖ Status update email sent via Resend to:', data.to);
      return { success: true };
    } catch (resendError: any) {
      console.error('[EMAIL] ‚ùå Resend failed:', resendError);
    }
  }

  // Priority 3: Fallback to Ethereal (for testing)
  try {
    const etherealTransporter = await createEtherealTransporter();
    if (etherealTransporter) {
      const info = await etherealTransporter.sendMail(emailContent);
      const previewUrl = nodemailer.getTestMessageUrl(info);
      console.log('[EMAIL] ‚ÑπÔ∏è  Status update email preview (Ethereal):', previewUrl);
      return { success: true, previewUrl: previewUrl || undefined };
    }
  } catch (etherealError) {
    console.error('[EMAIL] ‚ùå Ethereal failed:', etherealError);
  }

  return { success: false };
}

// Event registration cancellation email functionality
export async function sendEventCancellationEmail(
  email: string,
  name: string,
  eventTitle: string,
  eventLocation: string,
  eventStartDate: string,
  eventEndDate: string
): Promise<{ success: boolean; previewUrl?: string }> {
  try {
    const eventDate = new Date(eventStartDate).toLocaleDateString('hu-HU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long'
    });
    
    const eventTime = new Date(eventStartDate).toLocaleTimeString('hu-HU', {
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const eventEndTime = new Date(eventEndDate).toLocaleTimeString('hu-HU', {
      hour: '2-digit',
      minute: '2-digit'
    });

    console.log("Esem√©ny lemond√°s email k√ºld√©se...", {
      to: email,
      eventTitle,
      eventDate,
      environment: process.env.NODE_ENV
    });

    const emailHtml = `
      <div style="font-family: sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #f56565 0%, #c53030 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;">
          <h1 style="margin: 0; font-size: 24px;">Esem√©ny Jelentkez√©s Lemondva</h1>
        </div>
        
        <div style="padding: 30px; background-color: white;">
          <p style="font-size: 16px; color: #333;">Kedves ${name}!</p>
          
          <p style="color: #666;">Meger≈ës√≠tj√ºk, hogy lemondta jelentkez√©s√©t a k√∂vetkez≈ë esem√©nyr≈ël:</p>
          
          <div style="background-color: #fed7d7; padding: 20px; border-left: 4px solid #f56565; margin: 20px 0;">
            <strong style="color: #333; font-size: 18px;">${eventTitle}</strong>
          </div>
          
          <div style="background-color: #f7fafc; padding: 20px; border-radius: 6px; margin: 20px 0; border: 1px solid #e2e8f0;">
            <h3 style="margin: 0 0 15px 0; color: #4a5568;">üìÖ Esem√©ny r√©szletei</h3>
            <div style="color: #333;">
              <p style="margin: 5px 0;"><strong>üìÖ D√°tum:</strong> ${eventDate}</p>
              <p style="margin: 5px 0;"><strong>üïê Id≈ëpont:</strong> ${eventTime} - ${eventEndTime}</p>
              <p style="margin: 5px 0;"><strong>üìç Helysz√≠n:</strong> ${eventLocation}</p>
            </div>
          </div>
          
          <div style="background-color: #fed7d7; border: 1px solid #f56565; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #c53030;"><strong>‚ùå Jelentkez√©se lemondva!</strong></p>
            <p style="margin: 5px 0 0 0; color: #c53030;">Nem vesz r√©szt az esem√©nyen. Helye felszabadult m√°sok sz√°m√°ra.</p>
          </div>
          
          <div style="background-color: #e6fffa; border: 1px solid #38b2ac; border-radius: 4px; padding: 15px; margin: 20px 0;">
            <p style="margin: 0; color: #285e61;"><strong>üíö √öjra jelentkezhet!</strong></p>
            <p style="margin: 5px 0 0 0; color: #285e61;">Ha meggondolja mag√°t, b√°rmikor √∫jra jelentkezhet az esem√©nyre a weboldalunkon, am√≠g van szabad hely.</p>
          </div>
          
          <p style="color: #666; font-size: 14px; margin-top: 30px;">K√∂sz√∂nj√ºk, hogy figyelembe vette esem√©ny√ºnket. Rem√©lj√ºk, tal√°lkozunk egy k√∂vetkez≈ë alkalommal!</p>
        </div>
        
        <div style="background-color: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; border-radius: 0 0 8px 8px;">
          <p style="margin: 0;">Ez egy automatikus email. K√©rj√ºk, ne v√°laszoljon r√°.</p>
          <p style="margin: 5px 0 0 0;">¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform</p>
        </div>
      </div>
    `;

    // Email content for all services
    const emailContent = {
      from: '"Lovas Zolt√°n Esem√©nyek" <events@example.com>',
      to: email,
      subject: `Esem√©ny lemond√°s meger≈ës√≠tve - ${eventTitle}`,
      html: emailHtml,
      text: `
Kedves ${name}!

Meger≈ës√≠tj√ºk, hogy lemondta jelentkez√©s√©t a k√∂vetkez≈ë esem√©nyr≈ël:
${eventTitle}

Esem√©ny r√©szletei:
üìÖ D√°tum: ${eventDate}
üïê Id≈ëpont: ${eventTime} - ${eventEndTime}
üìç Helysz√≠n: ${eventLocation}

‚ùå Jelentkez√©se lemondva!

üíö √öjra jelentkezhet!
Ha meggondolja mag√°t, b√°rmikor √∫jra jelentkezhet az esem√©nyre a weboldalunkon, am√≠g van szabad hely.

K√∂sz√∂nj√ºk, hogy figyelembe vette esem√©ny√ºnket. Rem√©lj√ºk, tal√°lkozunk egy k√∂vetkez≈ë alkalommal!

¬© ${new Date().getFullYear()} Lovas Zolt√°n Gy√∂rgy - Politikai Platform
      `,
    };

    // Priority 1: Try Gmail SMTP (for real email sending)
    const gmailTransporter = createGmailTransporter();
    if (gmailTransporter) {
      try {
        const info = await gmailTransporter.sendMail({
          ...emailContent,
          from: `"Lovas Zolt√°n Esem√©nyek" <${process.env.GMAIL_USER}>`,
        });
        
        console.log("‚úÖ Gmail SMTP - Esem√©ny lemond√°s email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Gmail SMTP esem√©ny lemond√°s email k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 2: Try generic SMTP
    const smtpTransporter = createSMTPTransporter();
    if (smtpTransporter) {
      try {
        const info = await smtpTransporter.sendMail(emailContent);
        
        console.log("‚úÖ SMTP - Esem√©ny lemond√°s email sikeresen elk√ºldve!");
        console.log(`üì¨ Email ID: ${info.messageId}`);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('SMTP esem√©ny lemond√°s email k√ºld√©si hiba:', error);
        // Continue to next option
      }
    }

    // Priority 3: Try Resend (production service)
    if (resend) {
      try {
        const emailResult = await resend?.emails.send({
          from: "Lovas Zolt√°n Esem√©nyek <onboarding@resend.dev>",
          to: email,
          subject: `Esem√©ny lemond√°s meger≈ës√≠tve - ${eventTitle}`,
          html: emailHtml,
        });

        console.log("‚úÖ Resend - Esem√©ny lemond√°s email sikeresen elk√ºldve!");
        console.log("Resend email eredm√©nye:", emailResult);
        console.log(`üìß Val√≥s email elk√ºldve a k√∂vetkez≈ë c√≠mre: ${email}`);
        
        return { success: true };
      } catch (error) {
        console.error('Resend esem√©ny lemond√°s email k√ºld√©si hiba:', error);
        // Continue to fallback
      }
    }

    // Priority 4: Fallback to Ethereal Email (development preview only)
    if (process.env.NODE_ENV === 'development') {
      const transporter = await createEtherealTransporter();
      
      if (transporter) {
        try {
          const info = await transporter.sendMail(emailContent);
          const previewUrl = nodemailer.getTestMessageUrl(info);
          
          console.log("‚ö†Ô∏è Fallback: Ethereal Email preview (nem val√≥s email)");
          console.log(`üìß Email Preview URL: ${previewUrl}`);
          console.log(`üì¨ Email ID: ${info.messageId}`);
          
          return { success: true, previewUrl: previewUrl || undefined };
        } catch (error) {
          console.error('Ethereal Email esem√©ny lemond√°s k√ºld√©si hiba:', error);
        }
      }
    }

    // Final fallback: Log email details
    console.log("‚ùå Egyetlen email szolg√°ltat√°s sem el√©rhet≈ë!");
    console.log(`üìß ESEM√âNY LEMOND√ÅS EMAIL PREVIEW (csak konzol):`);
    console.log(`To: ${email}`);
    console.log(`Subject: Esem√©ny lemond√°s meger≈ës√≠tve - ${eventTitle}`);
    console.log(`Event: ${eventTitle} | ${eventDate} ${eventTime} | ${eventLocation}`);
    console.log(`---`);
    console.log(`üîß Konfigur√°lja a Gmail SMTP-t vagy Resend API-t val√≥s email k√ºld√©shez!`);
    
    return { success: true };

  } catch (error) {
    console.error("Esem√©ny lemond√°s email k√ºld√©si hiba:", {
      error: error instanceof Error ? error.message : String(error),
      email,
      eventTitle,
    });
    return { success: false };
  }
}
