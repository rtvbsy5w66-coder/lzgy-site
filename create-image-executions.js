#!/usr/bin/env node

require('dotenv').config({ path: '.env.local' });
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function createImageExecutions() {
  try {
    console.log('üñºÔ∏è K√©pes teszt executions l√©trehoz√°sa...');
    
    const sequenceId = 'cmg3y496u0000vhv016qvov6z';
    
    // Calculate timing for image emails
    const now = new Date();
    const email1Due = new Date(now.getTime()); // Azonnal
    
    console.log(`‚è∞ K√âPES Email #1 esed√©kes: ${email1Due.toLocaleString('hu-HU')} (AZONNAL)`);
    console.log(`üì∑ K√©pek: 200√ó150 ‚Üí 400√ó300 ‚Üí 600√ó400 ‚Üí 800√ó400 px`);
    
    // Create executions for image test emails
    const executions = await prisma.sequenceExecution.createMany({
      data: [
        {
          sequenceId: sequenceId,
          subscriberEmail: 'jakabgipsz865@gmail.com',
          subscriberName: 'Image Test User 1',
          status: 'ACTIVE',
          currentStep: 1,
          nextEmailDue: email1Due
        },
        {
          sequenceId: sequenceId,
          subscriberEmail: 'plscallmegiorgio@gmail.com',
          subscriberName: 'Image Test User 2',
          status: 'ACTIVE',
          currentStep: 1,
          nextEmailDue: email1Due
        }
      ]
    });
    
    console.log(`‚úÖ ${executions.count} k√©pes execution l√©trehozva!`);
    console.log('üìß C√≠mzettek: jakabgipsz865@gmail.com, plscallmegiorgio@gmail.com');
    console.log('üñºÔ∏è Az els≈ë k√©pes email azonnal k√ºld√©sre ker√ºl!');
    console.log('\nüé® V√ÅRT K√âPES EMAILEK:');
    console.log('üì∑ Email #1: Kis k√©p (200√ó150) - azonnal');
    console.log('üñºÔ∏è Email #2: K√∂zepes k√©p (400√ó300) - 1 perc m√∫lva');
    console.log('üé≠ Email #3: Nagy k√©p (600√ó400) - 3 perc m√∫lva');
    console.log('üåü Email #4: MEGA banner (800√ó400) - 4 perc m√∫lva');
    
  } catch (error) {
    console.error('‚ùå Hiba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createImageExecutions();