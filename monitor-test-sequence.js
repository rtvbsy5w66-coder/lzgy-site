#!/usr/bin/env node

const { exec } = require('child_process');

function log(message) {
  const timestamp = new Date().toLocaleString('hu-HU');
  console.log(`[${timestamp}] ${message}`);
}

let checkCount = 0;
let emailsReceived = 0;

function runSchedulerCheck() {
  checkCount++;
  log(`üîç Sequence scheduler ellen≈ërz√©s #${checkCount}...`);
  
  exec('npm run newsletter:schedule', (error, stdout, stderr) => {
    if (error) {
      log(`‚ùå Hiba: ${error.message}`);
      return;
    }
    
    // Parse newsletter results
    if (stdout.includes('Newsletter - Kamp√°nyok:')) {
      const newsletterMatch = stdout.match(/Newsletter - Kamp√°nyok: (\d+), Emailek: (\d+)/);
      if (newsletterMatch) {
        const campaigns = newsletterMatch[1];
        const emails = newsletterMatch[2];
        if (emails > 0) {
          log(`üìß Newsletter: ${emails} email elk√ºldve (${campaigns} kamp√°ny)`);
        }
      }
    }
    
    // Parse sequence results
    if (stdout.includes('Sequences - Feldolgozott:')) {
      const sequenceMatch = stdout.match(/Sequences - Feldolgozott: (\d+), Emailek: (\d+)/);
      if (sequenceMatch) {
        const sequences = sequenceMatch[1];
        const emails = parseInt(sequenceMatch[2]);
        
        if (emails > 0) {
          emailsReceived += emails;
          log(`üéØ SEQUENCE EMAIL ELK√úLDVE! √ñsszesen: ${emailsReceived} email`);
          
          if (emailsReceived >= 3) {
            log(`üéâ MIND A 3 EMAIL ELK√úLDVE! TESZT SIKERES!`);
            log(`‚úÖ Email #1: Azonnali k√ºld√©s`);
            log(`‚úÖ Email #2: 1 perc m√∫lva`);
            log(`‚úÖ Email #3: 3 perc m√∫lva`);
            log(`üèÅ SEQUENCE RENDSZER TESZTJE BEFEJEZVE!`);
            process.exit(0);
          }
        } else {
          log(`‚è≥ Nincs sequence email k√ºldve - v√°rakoz√°s...`);
        }
      }
    }
    
    // Check total emails
    if (stdout.includes('√ñsszes elk√ºld√∂tt email:')) {
      const totalMatch = stdout.match(/√ñsszes elk√ºld√∂tt email: (\d+)/);
      if (totalMatch && parseInt(totalMatch[1]) > 0) {
        log(`üìä √ñsszes email a ciklusban: ${totalMatch[1]}`);
      }
    }
    
    if (stdout.includes('Nincs esed√©kes kamp√°ny vagy sequence')) {
      log(`üí§ Nincs esed√©kes email`);
    }
  });
}

log('üöÄ Sequence teszt monitoring ind√≠t√°sa...');
log('‚è∞ Ellen≈ërz√©s minden 15 m√°sodpercben');
log('üéØ V√°rakoz√°s a 3 sz√°mozott teszt emailre...');
log('üìß Email #1: azonnal | Email #2: 1 perc | Email #3: 3 perc');

// Run immediately and then every 15 seconds
runSchedulerCheck();
setInterval(runSchedulerCheck, 15000);

// Stop after 10 minutes max
setTimeout(() => {
  log('‚è∞ 10 perc eltelt - monitoring le√°ll√≠tva');
  if (emailsReceived < 3) {
    log(`‚ö†Ô∏è Csak ${emailsReceived}/3 email ker√ºlt elk√ºld√©sre`);
  }
  process.exit(0);
}, 10 * 60 * 1000);