import { NextRequest, NextResponse } from 'next/server';
export const dynamic = 'force-dynamic';
import { PrismaClient } from '@prisma/client';
import { z } from 'zod';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import nodemailer from 'nodemailer';

const prisma = new PrismaClient();

const issueSubmissionSchema = z.object({
  categoryId: z.string().min(1, 'Kateg√≥ria megad√°sa k√∂telez≈ë'),
  reporterName: z.string().min(2, 'N√©v megad√°sa k√∂telez≈ë (minimum 2 karakter)'),
  reporterEmail: z.string().email('√ârv√©nyes email c√≠m megad√°sa k√∂telez≈ë'),
  reporterPhone: z.string().optional(),
  reporterAddress: z.string().optional(),
  title: z.string().min(5, 'C√≠m megad√°sa k√∂telez≈ë (minimum 5 karakter)'),
  description: z.string().min(10, 'R√©szletes le√≠r√°s k√∂telez≈ë (minimum 10 karakter)'),
  location: z.string().optional(),
  urgency: z.enum(['LOW', 'MEDIUM', 'HIGH', 'URGENT']),
  customFields: z.record(z.string(), z.any()).optional(),
  isPublic: z.boolean().default(true),
});

function generateTrackingNumber(): string {
  const year = new Date().getFullYear();
  const random = Math.floor(Math.random() * 999999).toString().padStart(6, '0');
  return `V5K-${year}-${random}`;
}

export async function POST(request: NextRequest) {
  try {
    // Session ellen≈ërz√©se - k√∂telez≈ë bejelentkez√©s
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      return NextResponse.json(
        { error: 'Bejelentkez√©s sz√ºks√©ges a probl√©m√°k bejelent√©s√©hez.' },
        { status: 401 }
      );
    }

    const body = await request.json();
    
    // Valid√°ci√≥ - a bejelentkezett felhaszn√°l√≥ adataival kieg√©sz√≠tj√ºk
    const validatedData = issueSubmissionSchema.parse({
      ...body,
      reporterName: session.user.name || body.reporterName,
      reporterEmail: session.user.email || body.reporterEmail,
    });
    
    // Kateg√≥ria l√©tez√©s√©nek ellen≈ërz√©se
    const category = await prisma.issueCategory.findFirst({
      where: {
        id: validatedData.categoryId,
        isActive: true
      }
    });
    
    if (!category) {
      return NextResponse.json(
        { error: 'A megadott kateg√≥ria nem tal√°lhat√≥ vagy nem akt√≠v' },
        { status: 400 }
      );
    }
    
    // Egyedi tracking sz√°m gener√°l√°sa
    let trackingNumber: string;
    let isUnique = false;
    let attempts = 0;
    
    do {
      trackingNumber = generateTrackingNumber();
      const existing = await prisma.issue.findUnique({
        where: { trackingNumber }
      });
      isUnique = !existing;
      attempts++;
    } while (!isUnique && attempts < 10);
    
    if (!isUnique) {
      return NextResponse.json(
        { error: 'Nem siker√ºlt egyedi tracking sz√°mot gener√°lni. K√©rj√ºk, pr√≥b√°lja √∫jra.' },
        { status: 500 }
      );
    }
    
    // Probl√©ma ment√©se az adatb√°zisba
    const issue = await prisma.issue.create({
      data: {
        categoryId: validatedData.categoryId,
        reporterName: validatedData.reporterName,
        reporterEmail: validatedData.reporterEmail,
        reporterPhone: validatedData.reporterPhone,
        reporterAddress: validatedData.reporterAddress,
        title: validatedData.title,
        description: validatedData.description,
        location: validatedData.location,
        urgency: validatedData.urgency as any,
        customFields: validatedData.customFields || {},
        trackingNumber: trackingNumber,
        isPublic: validatedData.isPublic,
        status: 'SUBMITTED',
        citizenNotified: false,
        attachments: [], // F√°jlok k√©s≈ëbb ker√ºlnek fel - JSON array form√°tumban
        submittedAt: new Date(),
      },
      include: {
        category: true
      }
    });
    
    // St√°tusz friss√≠t√©s l√©trehoz√°sa
    await prisma.issueStatusUpdate.create({
      data: {
        issueId: issue.id,
        newStatus: 'SUBMITTED',
        comment: 'A bejelent√©s sikeresen be√©rkezett √©s feldolgoz√°sra v√°r.',
        updatedBy: 'SYSTEM',
        updatedByRole: 'Automatikus rendszer',
        notifyCitizen: true,
        citizenNotified: false,
      }
    });
    
    // Email k√ºld√©se a bejelent≈ënek
    try {
      await sendConfirmationEmail(issue, category);
      
      // Citizen notification flag friss√≠t√©se
      await prisma.issue.update({
        where: { id: issue.id },
        data: { citizenNotified: true }
      });
      
      await prisma.issueStatusUpdate.updateMany({
        where: {
          issueId: issue.id,
          newStatus: 'SUBMITTED'
        },
        data: { citizenNotified: true }
      });
      
    } catch (emailError) {
      console.error('Email k√ºld√©si hiba:', emailError);
      // Email hiba eset√©n nem blokkoljuk a bejelent√©st
    }
    
    // Bels≈ë √©rtes√≠t√©s k√ºld√©se (admin email)
    try {
      await sendAdminNotification(issue, category);
    } catch (adminEmailError) {
      console.error('Admin email k√ºld√©si hiba:', adminEmailError);
    }
    
    return NextResponse.json({
      success: true,
      trackingNumber: issue.trackingNumber,
      issueId: issue.id,
      status: issue.status,
      message: 'A bejelent√©s sikeresen elk√ºldve. Tracking sz√°m: ' + issue.trackingNumber
    });
    
  } catch (error) {
    console.error('Issue submission error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          error: 'Valid√°ci√≥s hiba',
          details: error.issues.map(err => ({
            field: err.path.join('.'),
            message: err.message
          }))
        },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'V√°ratlan hiba t√∂rt√©nt. K√©rj√ºk, pr√≥b√°lja √∫jra k√©s≈ëbb.' },
      { status: 500 }
    );
  }
}

async function sendConfirmationEmail(issue: any, category: any) {
  if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
    console.warn('SMTP konfigur√°ci√≥ hi√°nyzik, email k√ºld√©s kihagyva');
    return;
  }
  
  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || '587'),
    secure: process.env.SMTP_SECURE === 'true',
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  });
  
  const emailContent = `
Tisztelt ${issue.reporterName}!

K√∂sz√∂nj√ºk a bejelent√©s√©t! Az al√°bbi probl√©m√°t r√∂gz√≠tett√ºk a rendszer√ºnkben:

üî∏ Tracking sz√°m: ${issue.trackingNumber}
üî∏ Kateg√≥ria: ${category.name}
üî∏ C√≠m: ${issue.title}
üî∏ Helysz√≠n: ${issue.location || 'Nem megadva'}
üî∏ S√ºrg≈ëss√©g: ${issue.urgency}
üî∏ Bejelent√©s id≈ëpontja: ${issue.submittedAt.toLocaleString('hu-HU')}

A bejelent√©s jelenleg "Bek√ºldve" st√°tuszban van. Munkat√°rsaink hamarosan √°ttekintik √©s int√©zkednek.

A bejelent√©s √°llapot√°t b√°rmikor nyomon k√∂vetheti a tracking sz√°mmal a weboldalunkon.

Amennyiben k√©rd√©se van, k√©rj√ºk v√°laszoljon erre az emailre vagy h√≠vja az irod√°nkat.

√údv√∂zlettel,
Lovas Zolt√°n irod√°ja
V. Ker√ºleti √ñnkorm√°nyzati K√©pvisel≈ë
`;
  
  await transporter.sendMail({
    from: `"${process.env.SMTP_FROM_NAME || 'Lovas Zolt√°n irod√°ja'}" <${process.env.SMTP_FROM_EMAIL || process.env.SMTP_USER}>`,
    to: issue.reporterEmail,
    subject: `Bejelent√©s visszaigazol√°s - ${issue.trackingNumber}`,
    text: emailContent,
    html: emailContent.replace(/\n/g, '<br>')
  });
  
  // Notification record l√©trehoz√°sa
  await prisma.issueNotification.create({
    data: {
      issueId: issue.id,
      type: 'CONFIRMATION',
      subject: `Bejelent√©s visszaigazol√°s - ${issue.trackingNumber}`,
      message: emailContent,
      recipientEmail: issue.reporterEmail,
      recipientName: issue.reporterName,
      sent: true,
      sentAt: new Date(),
    }
  });
}

async function sendAdminNotification(issue: any, category: any) {
  if (!process.env.ADMIN_EMAIL || !process.env.SMTP_HOST) {
    console.warn('Admin email vagy SMTP konfigur√°ci√≥ hi√°nyzik');
    return;
  }
  
  const transporter = nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT || '587'),
    secure: process.env.SMTP_SECURE === 'true',
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  });
  
  const adminContent = `
√öj bejelent√©s √©rkezett!

Tracking sz√°m: ${issue.trackingNumber}
Kateg√≥ria: ${category.name}
Bejelent≈ë: ${issue.reporterName} (${issue.reporterEmail})
Telefon: ${issue.reporterPhone || 'Nem megadva'}
C√≠m: ${issue.title}
Le√≠r√°s: ${issue.description}
Helysz√≠n: ${issue.location || 'Nem megadva'}
S√ºrg≈ëss√©g: ${issue.urgency}

Egyedi mez≈ëk:
${JSON.stringify(issue.customFields, null, 2)}

Admin fel√ºlet: ${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/admin/issues/${issue.id}
`;
  
  await transporter.sendMail({
    from: `"Bejelent≈ë Rendszer" <${process.env.SMTP_FROM_EMAIL || process.env.SMTP_USER}>`,
    to: process.env.ADMIN_EMAIL,
    subject: `üö® √öj bejelent√©s: ${category.name} - ${issue.trackingNumber}`,
    text: adminContent,
    html: adminContent.replace(/\n/g, '<br>')
  });
}