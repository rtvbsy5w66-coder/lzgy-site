#!/usr/bin/env node

const { exec } = require('child_process');

function log(message) {
  const timestamp = new Date().toLocaleString('hu-HU');
  console.log(`[${timestamp}] ${message}`);
}

let checkCount = 0;

function runSchedulerCheck() {
  checkCount++;
  log(`üîç Scheduler ellen≈ërz√©s #${checkCount}...`);
  
  exec('npm run newsletter:schedule', (error, stdout, stderr) => {
    if (error) {
      log(`‚ùå Hiba: ${error.message}`);
      return;
    }
    
    // Parse the output to see if emails were sent
    if (stdout.includes('Elk√ºld√∂tt emailek: 0')) {
      log('‚è≥ Nincs esed√©kes kamp√°ny - v√°rakoz√°s...');
    } else if (stdout.includes('Elk√ºld√∂tt emailek:')) {
      const sentMatch = stdout.match(/Elk√ºld√∂tt emailek: (\d+)/);
      const processedMatch = stdout.match(/Feldolgozott kamp√°nyok: (\d+)/);
      
      if (sentMatch && sentMatch[1] > 0) {
        log(`üéâ SIKER! ${sentMatch[1]} email elk√ºldve!`);
        log(`üìß ${processedMatch[1]} kamp√°ny feldolgozva`);
        log('‚úÖ Teszt kamp√°ny sikeresen elk√ºldve!');
        
        // Stop monitoring
        log('üõë Monitoring le√°ll√≠tva - teszt befejezve');
        process.exit(0);
      }
    }
  });
}

log('üöÄ Newsletter scheduler monitoring ind√≠t√°sa...');
log('‚è∞ Ellen≈ërz√©s minden 30 m√°sodpercben');
log('üéØ V√°rakoz√°s a teszt kamp√°ny k√ºld√©s√©re...');

// Run immediately and then every 30 seconds
runSchedulerCheck();
setInterval(runSchedulerCheck, 30000);

// Stop after 10 minutes max
setTimeout(() => {
  log('‚è∞ 10 perc eltelt - monitoring le√°ll√≠tva');
  process.exit(0);
}, 10 * 60 * 1000);