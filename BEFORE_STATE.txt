=== CURRENT EventsSection.tsx STATE ===
"use client";

import React, { useEffect, useState } from "react";
import { CalendarDays, MapPin, ChevronRight, Loader2 } from "lucide-react";
import Link from "next/link";

interface Event {
  id: string;
  title: string;
  description: string;
  location: string;
  startDate: string;
  endDate: string;
  status: "UPCOMING" | "ONGOING" | "COMPLETED" | "CANCELLED";
  imageUrl?: string;
}

const EventsSection = () => {
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch("/api/events");
        if (!response.ok) throw new Error("Failed to fetch events");
        
        const data = await response.json();
        
        // SORTING and FILTERING
        const filteredEvents = data
          .filter((event: Event) => 
            ["UPCOMING", "ONGOING"].includes(event.status)
          )
          .sort((a: Event, b: Event) => 
            new Date(a.startDate).getTime() - new Date(b.startDate).getTime()
          )
          .slice(0, 3);

        setEvents(filteredEvents);
      } catch (error) {
        console.error("Error fetching events:", error);
        setError("Hiba az események betöltése közben");
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
=== CURRENT HirekSzekcio.tsx STATE ===
"use client";

import React, { useEffect, useState } from "react";
import { ArrowRight, Calendar, Loader2, FileText } from "lucide-react";
import Link from "next/link";
import Image from "next/image";

interface Post {
  id: string;
  title: string;
  content: string;
  excerpt?: string;
  imageUrl?: string;
  status: "DRAFT" | "PUBLISHED";
  createdAt: string;
  updatedAt: string;
}

const HirekSzekcio = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const response = await fetch("/api/posts");
        if (!response.ok) throw new Error("Failed to fetch posts");
        
        const data = await response.json();
        
        // FILTERING and SORTING
        const publishedPosts = data
          .filter((post: Post) => post.status === "PUBLISHED")
          .sort((a: Post, b: Post) => 
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          )
          .slice(0, 3);

        setPosts(publishedPosts);
      } catch (error) {
        console.error("Error fetching posts:", error);
        setError("Hiba a hírek betöltése közben");
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);
