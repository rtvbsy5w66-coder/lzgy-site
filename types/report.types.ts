// ===============================================
// V. KER√úLETI K√âPVISEL≈êI BEJELENT√âSI RENDSZER - TYPES
// ===============================================

export const CATEGORIES = {
  ROADS: 'roads',
  LIGHTING: 'lighting',
  PARKS: 'parks',
  WASTE: 'waste',
  TRAFFIC: 'traffic',
  NOISE: 'noise',
  SOCIAL: 'social',
  GRANTS: 'grants',
  TRANSPARENCY: 'transparency',
  OTHER: 'other',
} as const;

export type CategoryType = typeof CATEGORIES[keyof typeof CATEGORIES];

// Kateg√≥ria labels magyar nyelven - PONTOSAN EGYEZNEK A SLIDER KATEG√ìRI√ÅKKAL
export const CATEGORY_LABELS: Record<CategoryType, string> = {
  roads: 'üõ£Ô∏è √öthib√°k √©s j√°rd√°k',
  lighting: 'üí° K√∂zvil√°g√≠t√°s',
  parks: 'üå≥ Parkok √©s z√∂ldter√ºletek',
  waste: 'üóëÔ∏è Hullad√©kkezel√©s',
  traffic: 'üö¶ K√∂zleked√©s',
  noise: 'üîä Zajszennyez√©s',
  social: '‚ù§Ô∏è Szoci√°lis √ºgyek',
  grants: 'üí∞ P√°ly√°zatok √©s t√°mogat√°sok',
  transparency: '‚öñÔ∏è √Åtl√°that√≥s√°g √©s korrupci√≥',
  other: '‚ùì Egy√©b probl√©ma',
};

// Kateg√≥ria r√∂vid le√≠r√°sok - PONTOSAN EGYEZNEK A SLIDER LE√çR√ÅSOKKAL
export const CATEGORY_DESCRIPTIONS: Record<CategoryType, string> = {
  roads: '√ötburkolat k√°rok, j√°rdahib√°k, k√°ty√∫k',
  lighting: 'Utcai vil√°g√≠t√°s hib√°k, ki√©gett l√°mp√°k',
  parks: 'Park karbantart√°s, j√°tsz√≥terek, n√∂v√©nyzet',
  waste: 'Szem√©tsz√°ll√≠t√°s, kont√©nerek, illeg√°lis lerak√°s',
  traffic: 'KRESZ t√°bl√°k, zebra, parkol√°s, dug√≥k',
  noise: 'T√∫lzott zaj, √©p√≠tkez√©si zajok',
  social: 'Id≈ësell√°t√°s, csal√°dseg√≠t√©s, szoci√°lis t√°mogat√°sok',
  grants: 'EU p√°ly√°zatok, √∂nkorm√°nyzati t√°mogat√°sok, civil szervezetek',
  transparency: 'K√∂zp√©nzek felhaszn√°l√°sa, beszerz√©sek, √°tl√°that√≥s√°g',
  other: 'Minden m√°s √∂nkorm√°nyzati √ºgy',
};

// S√ºrg≈ëss√©gi szintek
export const URGENCY_LEVELS = {
  LOW: 'low',
  MEDIUM: 'medium',
  HIGH: 'high',
  EMERGENCY: 'emergency',
} as const;

export type UrgencyType = typeof URGENCY_LEVELS[keyof typeof URGENCY_LEVELS];

export const URGENCY_LABELS: Record<UrgencyType, string> = {
  low: 'Alacsony',
  medium: 'K√∂zepes',
  high: 'S√ºrg≈ës',
  emergency: 'V√©szhelyzet',
};

export const URGENCY_COLORS: Record<UrgencyType, string> = {
  low: 'bg-green-100 text-green-800',
  medium: 'bg-yellow-100 text-yellow-800',
  high: 'bg-orange-100 text-orange-800',
  emergency: 'bg-red-100 text-red-800',
};

export const URGENCY_ICONS: Record<UrgencyType, string> = {
  low: 'üü¢',
  medium: 'üü°',
  high: 'üü†',
  emergency: 'üî¥',
};

// St√°tuszok
export const REPORT_STATUS = {
  SUBMITTED: 'submitted',
  IN_PROGRESS: 'in_progress',
  RESOLVED: 'resolved',
  ARCHIVED: 'archived',
} as const;

export type ReportStatusType = typeof REPORT_STATUS[keyof typeof REPORT_STATUS];

export const STATUS_LABELS: Record<ReportStatusType, string> = {
  submitted: 'Bek√ºldve',
  in_progress: 'Folyamatban',
  resolved: 'Megoldva',
  archived: 'Archiv√°lva',
};

export const STATUS_COLORS: Record<ReportStatusType, string> = {
  submitted: 'bg-blue-100 text-blue-800',
  in_progress: 'bg-yellow-100 text-yellow-800',
  resolved: 'bg-green-100 text-green-800',
  archived: 'bg-gray-100 text-gray-800',
};

// Felel≈ës oszt√°lyok
export const DEPARTMENTS = {
  PUBLIC_WORKS: 'public_works',
  UTILITIES: 'utilities',
  ENVIRONMENT: 'environment',
  TRAFFIC: 'traffic',
  SOCIAL: 'social',
  CULTURE: 'culture',
  ADMINISTRATION: 'administration',
  DEVELOPMENT: 'development',
} as const;

export type DepartmentType = typeof DEPARTMENTS[keyof typeof DEPARTMENTS];

export const DEPARTMENT_LABELS: Record<DepartmentType, string> = {
  public_works: 'K√∂zter√ºlet-fenntart√°s',
  utilities: 'K√∂zm≈±vek √©s Infrastrukt√∫ra',
  environment: 'K√∂rnyezetv√©delem',
  traffic: 'K√∂zleked√©si Oszt√°ly',
  social: 'Szoci√°lis √©s Csal√°d√ºgyi Oszt√°ly',
  culture: 'Kultur√°lis √©s Oktat√°si Oszt√°ly',
  administration: 'Igazgat√°si Oszt√°ly',
  development: 'V√°rosfejleszt√©si Oszt√°ly',
};

// K√∂lts√©gbecsl√©s kateg√≥ri√°k
export const COST_ESTIMATES = {
  UNDER_100K: 'under_100k',
  '100K_500K': '100k_500k',
  '500K_1M': '500k_1m',
  '1M_5M': '1m_5m',
  OVER_5M: 'over_5m',
  UNKNOWN: 'unknown',
} as const;

export type CostEstimateType = typeof COST_ESTIMATES[keyof typeof COST_ESTIMATES];

export const COST_ESTIMATE_LABELS: Record<CostEstimateType, string> = {
  under_100k: '100 ezer Ft alatt',
  '100k_500k': '100-500 ezer Ft',
  '500k_1m': '500 ezer - 1 milli√≥ Ft',
  '1m_5m': '1-5 milli√≥ Ft',
  over_5m: '5 milli√≥ Ft felett',
  unknown: 'Ismeretlen / Nem becs√ºlhet≈ë',
};

// Ker√ºleti ter√ºletek
export const DISTRICT_AREAS = {
  BELVAROS: 'Belv√°ros',
  LIPOTVAROS: 'Lip√≥tv√°ros',
  BOTH: 'Mindkett≈ë',
} as const;

export type DistrictAreaType = typeof DISTRICT_AREAS[keyof typeof DISTRICT_AREAS];

// TypeScript interfaces
export interface CreateReportData {
  category: CategoryType;
  subcategory: string;
  title: string;
  description: string;
  addressText: string;
  addressId?: string;
  postalCode?: string;
  affectedArea?: string;
  urgency: UrgencyType;
  department?: DepartmentType;
  estimatedCost?: CostEstimateType;
  legalIssue?: boolean;
  categoryData?: Record<string, any>;
}

export interface ReportData {
  id: string;
  createdAt: string;
  updatedAt: string;
  
  // K√©pvisel≈ë
  authorId: string;
  representativeName: string;
  districtArea?: string;
  
  // Tartalom
  category: CategoryType;
  subcategory: string;
  title: string;
  description: string;
  
  // Helysz√≠n
  addressId?: string;
  addressText: string;
  postalCode?: string;
  affectedArea?: string;
  
  // St√°tusz
  urgency: UrgencyType;
  department?: DepartmentType;
  estimatedCost?: CostEstimateType;
  status: ReportStatusType;
  assignedTo?: string;
  resolvedAt?: string;
  resolutionNote?: string;
  
  // Adminisztrat√≠v
  legalIssue: boolean;
  internalNotes?: string;
  categoryData?: Record<string, any>;
  
  // Relations (optional for API responses)
  author?: {
    name?: string;
    email?: string;
  };
  address?: {
    id: string;
    fullAddress: string;
    postalCode: string;
    coordinates?: {
      lat: number;
      lng: number;
    };
  };
  _count?: {
    attachments: number;
    history: number;
  };
  attachments?: Array<{
    id: string;
    filename: string;
    fileUrl: string;
    fileType: string;
    fileSize: number;
    uploadedAt: string;
  }>;
  history?: Array<{
    id: string;
    createdAt: string;
    changedBy: string;
    action: string;
    oldValue?: string;
    newValue?: string;
    comment?: string;
  }>;
}

export interface ReportListResponse {
  success: boolean;
  data: ReportData[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface CreateReportResponse {
  success: boolean;
  reportId: string;
  data: ReportData;
}

// History action types
export const HISTORY_ACTIONS = {
  CREATED: 'created',
  STATUS_CHANGED: 'status_changed',
  ASSIGNED: 'assigned',
  UPDATED: 'updated',
  COMMENT_ADDED: 'comment_added',
} as const;

export type HistoryActionType = typeof HISTORY_ACTIONS[keyof typeof HISTORY_ACTIONS];

export const HISTORY_ACTION_LABELS: Record<HistoryActionType, string> = {
  created: 'L√©trehozva',
  status_changed: 'St√°tusz m√≥dos√≠tva',
  assigned: 'Kiosztva',
  updated: 'Friss√≠tve',
  comment_added: 'Megjegyz√©s hozz√°adva',
};